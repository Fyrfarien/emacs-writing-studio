#+title: Appendix: The Annotated Emacs Writing Studio Configuration
#+property:     header-args:elisp :tangle ../../init.el :results none :eval no
#+startup:      content

I learned writing computer code by typing long listings of Atari BASIC code and slowly but surely understood its syntax and logic. This method is also a great starting point to learn Emacs Lisp. The purpose of this configuration is for you as a starting point. Feel free to modify anything in the {{{ews}}} (EWS) initialisation file and study its effects.

Many Emacs users share their configuration so that you can copy parts of their code as an active learning experience. The copy-paste method is a shortcut to learn more about Emacs Lisp, as you can change the settings and explore the results of your changes.

This appendix presents and explains the /Emacs Writing Studio/ configuration. This configuration stays as close to vanilla GNU Emacs as is humanly bearable for an author. The configuration is annotated to explain the logic of he code and provides with some options for enhancements or additional functionality. This configuration follows the following principles:

- Leverage functionality of the latest version of GNU Emacs
- Use standard keyboard shortcuts
- Centred around Org mode
- No configuration for writing code

* Using {{{EWS}}}
The first part of the configuration sets the basic principles of the EWS configuration, such as package management, the user interface look and feel, the minibuffer completion system and basic settings to enable writing for humans. Chapter [[#chap:ews]] describes using this configuration.

** Basic Configuration
The first part of the configuration checks if the latest version of Emacs is running. EWS leverages some of the latest functionality, so you will need to install this version. Note that the expression ~(< emacs-major-version 29)~ is in Polish notation. In Lisp, the operator is placed before the operands, unlike the more common infix notation which places the operator between the operands, e.g. ~emacs-major-version < 29~. 

Any changes made by the Emacs customisation system in EWS are stored in =custom.el= instead of directly to the init file. This approach prevents the customisation system modifying the initialisation file. The =custom.el= file is loaded when found. If variables are set in both the custom file and the init file, the latter takes preference.

#+begin_src elisp
  ;; Emacs 29?
  (when (< emacs-major-version 29)
    (error "Emacs Writing Studio requires Emacs version 29 or later"))

  ;; Custom settings in a separate file and load the custom settings
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

EWS also provides a range of bespoke convenience functions for various aspects of the writing process. This package is not available on any Emacs repository, but is loaded directly from the GitHub repository.

#+begin_src elisp
    ;; Load EWS functions
  (load-file (concat (file-name-as-directory
                      user-emacs-directory)
                     "ews.el"))
#+end_src

** Packages and External Software
This configuration heavily relies on John Wiegley's Use-Package. This package makes it easier to install and configure packages with a standardised and easy to read method. Software developers call such a tool 'syntactic sugar', which is syntax designed to make code easier to read or write, making the language "sweeter" for humans [cite:@landin_1964].

Emacs users have developed and shared thousands of packages with the rest of the community. The first part of the configuration sets the basic elements to load and install packages from the MELPA archive, in addition to the default ELPA repository.

The Use-Package system consists of a set of statements between parenthesis, which in this case is a macro. In it's simplest form it is something like ~(use-package <package-name>)~. The code can also contain one or more sections to set various options. The =:config= section in the first part evaluates code after the package is loaded, which in this case adds MELPA to the archives and initialises the package manager. The =:custom= section in the second Use-Package macro sets three variables, documented in the comments.

The easiest method to install packages is with the Use-Package macro, which downloads, installs and configures a package. The example below downloads and installs the Dracula theme, a popular colour theme available for hundreds of software packages. The first line identifies the package. The ~:ensure t~ in the second line ensures that Emacs downloads the package if not already available. Any code under ~:config~ will run when the package is activated. In this case, we load the theme without asking for confirmation.

#+begin_src elisp :tangle no
  (use-package dracula-theme
    :ensure t
    :config
    (load-theme 'dracula :no-confirm))
#+end_src

These are the basic principles of installing and configuring packages. The Use-Package methodology has many more options, which are discussed in the Appendix.

To read the finer details of the Use-Package macro, read the manual with =C-h R use-package=.

#+begin_src elisp
  ;; Set package archives
  (use-package package
    :config
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (package-initialize))

  ;; Package Management
  (use-package use-package
    :custom
    (use-package-always-ensure t)
    (package-native-compile t)
    (warning-minimum-level :emergency))
#+end_src

The ~ews-missing-executables~ function checks if external software is available on your system. Emacs writes a message in the minibuffer if any of the recommended tools is missing. You can jump to the =*Messages*= buffer with =C-h e= to review the output. If packages are missing, then Emacs will function normally, but some features might be unavailable. The relevant chapters in this book provide more details which software is required and the tasks it undertakes.

The input for this function is a list, which is a series of strings between parenthesis that starts with a tick symbol. This symbol prevents Emacs confusing the list of data with a function. In this example, the list also contains other lists.

This function looks whether all these packages are available on your system. Any software in a nested list, such as =("convert" "gm")=, only one of them has to be available as these programs are alternatives for the same functionality.

#+begin_src elisp
  ;; Check for missing external software
  (ews-missing-executables
   '("soffice" "zip" "pdftotext" "ddjvu"
     "curl"
     "dvipng"
     "dot"
     ("convert" "gm")
     "latex"
     "hunspell"
     ("grep" "ripgrep")
     ("gs" "mutool")
     "pdftotext"
     ("mpg321" "ogg123" "mplayer" "mpv" "vlc")))
#+end_src

** Look and Feel
The basic idea is to create a clean and keyboard-centric writing interface with minimal distractions.

The first three lines of code for the EWS look and feel disable the toolbar, the menu bar and the scroll bar. The menu bar can be useful for beginners and you can still access it with the =F10= key. If you like to keep the tool, menu and/or scroll bars, then either remove the relevant lines, change the =-1= to a =1= or add two semi colons at the start of the line to convert them to comments.

Vanilla Emacs has the slightly paternalistic habit to require only a single =Y= or =N= answer while on some occasions it requires you to type =yes= or =no=, due to the perceived higher risk of typing the wrong answer. The ~setq~ function sets the ~use-short-answers~ variable to =t=. If you like to retain this behaviour, then change the =t= into a nil. In Emacs Lisp, =t= means TRUE and =nil= is equivalent to FALSE. Confusingly Emacs documentation often mentions to set a value to "non-nil", which is a double negative to suggest setting the variable to true.

#+begin_src elisp
  ;; Keyboard-centric user interface removing tool, menu and scroll bars
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Short answers only please
  (setq use-short-answers t)
#+end_src

The next two sections of code further improve the Emacs interface with two packages by Emacs guru Protesilaos Stavrou from Cyprus. The spacious padding package creates some whitespace around windows, preventing crammed text on your screen. The Modus Themes package provides a collection of light and dark themes. These themes conform with the highest standard for colour contrast between background and foreground values (WCAG AAA). They also are optimised for users with red-green colour deficiency.

The Spacious Padding package is used using only default values. The =:init= section contains code that Emacs evaluates when loading the package. In this case, it enables the Spacious Padding mode. The =:custom= section also sets the line spacing to a more spacious value. You can read the manual for this mode with =C-h R spacious=.

#+begin_src elisp
  ;; Spacious padding
  (use-package spacious-padding
    :custom
    (line-spacing 3)
    :init
    (spacious-padding-mode 1))
#+end_src

The Modus themes package is highly configurable. This Use-Package declaration contains a few sections. The custom section customises variables used in the package. In this case we instruct the package to use italic and bold fonts for emphasis and allow for fonts with fixed and variable pitch. The code also slightly increases the size of headings. You can toggle between a dark and a light version of this theme and the last variable defines which these to toggle between. EWS uses the tinted version of the themes, which you can modify.

The =:custom= section of the macro sets some variables to define fonts. This section also defines which themes are toggled when switching between light and dark themes. The default is the tinted versions. If you would like your configuration to default to the high-contrast versions or one of the two colour blindness-safe versions, customise the ~modus-themes-to-toggle~ variable. To see the possible options for the Modus themes use the help file: =C-h v modus-themes-collection=. Read the package manual for details with =C-h R modus=.

The =:init= section activates the tinted version of the Modus-Vivendi (light) theme. The next section binds some keys to commands to either toggle between dark and light or select any of the available modus themes. All EWS custom keybindings start with =C-c w= as the prefix key and =C-c w t= as the prefix key for the two Modus theme functions. You can obviously change these  The last section hooks the Variable Pitch mode to any buffer in text mode. This means that written prose is displayed in variable pitch, while metadata, code and other items are in fixed pitch. A hook is a construction in Emacs that associates modes with each other. In this case, variable pitch text will is enabled for all text mode buffers.

#+begin_src elisp
  ;; Modus Themes
  (use-package modus-themes
    :custom
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs t)
    (modus-themes-mixed-fonts t)
    (modus-themes-headings '((1 . (1.2))
                             (2 . (1.1))
                             (t . (1.0))))
    (modus-themes-to-toggle
     '(modus-operandi-tinted modus-vivendi-tinted))
    :init
    (load-theme 'modus-operandi-tinted :no-confirm)
    :bind
    (("C-c w t t" . modus-themes-toggle)
     ("C-c w t s" . modus-themes-select)))

  (use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode))
#+end_src

This last code snippet in the look-and-feel section changes the way Emacs automatically split windows to favour vertical splits over horizontal ones to improve readability. This section also installs the Balanced Windows package which manages window sizes automatically. For example, when opening three windows and you close one, the remaining windows each get half the screen.

#+begin_src elisp
  (setq split-width-threshold 120
        split-height-threshold nil)

  (use-package balanced-windows
    :config
    (balanced-windows-mode))
#+end_src

Alternatively, you can add these settings directly to your =init.el= file by adding the following three lines, with your fonts and sizes of choice.

#+begin_src elisp :tangle no
  (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 130)
  (set-face-attribute 'fixed-pitch nil :font "DejaVu Sans Mono")
  (set-face-attribute 'variable-pitch nil :font "DejaVu Sans")
#+end_src

** Minibuffer Completion
{{{ews}}} uses the Vertico-Orderless-Marginalia stack of minibuffer completion packages in their standard configuration.

#+begin_src elisp
  ;; MINIBUFFER COMPLETION

  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)
    :custom
    (vertico-sort-function 'vertico-sort-history-alpha))

  ;; Persist history over Emacs restarts.
  (use-package savehist
    :init
    (savehist-mode))

  ;; Search for partial matches in any order
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides
     '((file (styles partial-completion)))))

  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

** Keyboard Shortcuts Menu
The Which-Key package improves discoverability of keyboard shortcuts with a popup in the minibuffer. The columns are widened a bit to prevent long truncated function names. Due to the naming conventions in Emacs, most functions start with the package name, so some can be quite long.

#+begin_src elisp
    ;; Improve keyboard shortcut discoverability
    (use-package which-key
      :config
      (which-key-mode)
      :custom
      (which-key-max-description-length 40))
#+end_src

** Improved Help Functionality
Emacs is advertised as the self-documenting text editor. While this is not quite correct (if only computer code could document itself), almost every single aspect of Emacs is documented within the program itself. The /Helpful/ package by Wilfred Hughes is an alternative to the built-in Emacs help that provides more contextual information. When, for example, asking for documentation about a variable, the help file provides links to its customisation screen.

#+begin_src elisp
  ;; Improved help buffers
  (use-package helpful
    :bind
    (("C-h x" . helpful-command)    ;; Help about commands
     ("C-h k" . helpful-key)        ;; Help about keystrokes
     ("C-h v" . helpful-variable))) ;; Help about variables
#+end_src

** Configure Text Modes
Emacs is principally designed for developing computer code, so it needs some modifications to enable writing text for humans. Firstly we hook Visual Line Mode to Text Mode. Visual Line mode wraps long lines to the nearest word to fit in the current window.

By default, Emacs does not replace text when you select a section and then start typing, which is unusual behaviour when writing prose. The =:init= section enables a more common default so that selected text is deleted when typed over. The =:custom= section enables the page-up and page-down keys to scroll all the way to the top or bottom of a buffer. The last variable saves any existing clipboard text into the kill ring for better operability between the operating system's clipboard and Emacs's kill ring.

#+begin_src elisp
  ;;; Text mode settings
  (use-package text-mode
    :ensure
    nil
    :hook
    (text-mode . visual-line-mode)
    :init
    (delete-selection-mode t)
    :custom
    (scroll-error-top-bottom t)
    (save-interprogram-paste-before-kill t))
#+end_src

** Spellchecking
Writing without automated spell checking would be very hard even for the most experienced authors. The Flyspell package requires the hunspell software to be available and the relevant dictionary. You might want to change the standard dictionary to your local variety with the ~flyspell-default-dictionary~  variable.

#+begin_src elisp
  ;; Check spelling with flyspell and hunspell
  (use-package flyspell
    :custom
    (ispell-silently-savep t)
    (ispell-program-name "hunspell")
    (flyspell-default-dictionary "en_AU")
    (flyspell-case-fold-duplications t)
    (flyspell-issue-message-flag nil)
    (org-fold-core-style 'overlays) ;; Fix Org mode bug
    :hook
    (text-mode . flyspell-mode)
    :bind
    (("C-c w s s" . ispell)
     ("C-;"       . flyspell-auto-correct-previous-word)))
#+end_src

** Ricing Org Mode
This part of the configuration sets a bunch of variables to improve the design of Org mode buffers. Org mode has a lot of other variables you can configure to change its interface, which are all explained in chapter [[#chap:ews]]. The ~setq~ function can take several pairs of variables and their new values as parameters, as shown in the example below.

You can easily add other variables or remove some to make Org mode look the way you prefer. For example, to enable alphabetical lists and numerals, you need to customise the ~org-list-allow-alphabetical~ variable to =t=. This adds =a.=, =A.=, =a)= and =A)= as additional options to number a list.

If you have no need for mathematical notation and LaTeX, then you should disable the ~org-startup-with-latex-preview~ variable to prevent error messages.

#+begin_src elisp
    ;;; RICING ORG MODE
  (use-package org
    :custom
    (org-startup-indented t)
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-image-actual-width '(450))
    (org-fold-catch-invisible-edits 'error)
    (org-startup-with-latex-preview t)
    (org-pretty-entities t)
    (org-use-sub-superscripts "{}"))

  ;; Show hidden emphasis markers
  (use-package org-appear
    :hook
    (org-mode . org-appear-mode))
#+end_src

The Org-Fragtog package automatically toggles Org mode LaTeX fragment previews as the cursor enters and exits them. By default, the text is a bit small and can become unreadable when changing between dark and light themes. The =org-format-latex-options= variable controls the way the Emacs presents fragments. This variable is a list with properties such as colours and size. The =plist-put= function lets you change one of these options in the list. The foreground and background are set to take the same colour as your text. If you change from dark to light mode or vice versa, you might need to evaluate the ~org-latex-preview~ function (=C-c C-x C-l=) to change the preview images.

#+begin_src elisp
  ;; LaTeX previews
  (use-package org-fragtog
    :after org
    :hook
    (org-mode . org-fragtog-mode)
    :custom
    (org-format-latex-options
     (plist-put org-format-latex-options :scale 2)
     (plist-put org-format-latex-options :foreground 'auto)
     (plist-put org-format-latex-options :background 'auto)))
#+end_src

Most of the features of Org-Modern have been switched off in the custom section because it might be better for beginning users as these settings hide the semantic symbols. 

#+begin_src elisp
  ;; Org modern: Most features disables for beginnng users
  (use-package org-modern
    :hook
    (org-mode . org-modern-mode)
    :custom
    (org-modern-table nil)
    (org-modern-keyword nil)
    (org-modern-timestamp nil)
    (org-modern-priority nil)
    (org-modern-checkbox nil)
    (org-modern-tag nil)
    (org-modern-block-name nil)
    (org-modern-keyword nil)
    (org-modern-footnote nil)
    (org-modern-internal-target nil)
    (org-modern-radio-target nil)
    (org-modern-statistics nil)
    (org-modern-progress nil))
#+end_src

* Inspiration
** Read ebooks
The built-in Doc-View package can read various file formats with the assistance of external software. This configuration increases the resolution of the generated image file and raises the threshold for warning before opening large files to fifty MB ($50 \times 2^{20}$). Section [[#sec:pdf]] explains how to use this package.

#+begin_src elisp
  ;; INSPIRATION
  
  ;; Doc-View
    (use-package doc-view
      :custom
      (doc-view-resolution 300)
      (large-file-warning-threshold (* 50 (expt 2 20))))
#+end_src

DocView has some limitations compared to other document viewers. The text is displayed as a PNG file which limits search capabilities and makes copying text impossible. The =pdf-tools= package by Vedang Manerikar is much more versatile than DocView. It is unfortunately not included in /Emacs Writing Studio/ because it is complex to install on non-Linux systems.

The Nov package by Vasilij Schneidermann provides useful functionality for viewing ePub books inside Emacs. The init section ensures that any file with an =epub= extension is associated with this package. Refer to section [[#sec:epub]] on how to read ePub files.

#+begin_src elisp
 ;; Read ePub files
  (use-package nov
    :init
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

There is currently a confirmed bug in Org mode (version 9.6.6) that overrides the associations between LibreOffice and Doc View mode. The code below is a workaround to reinstate the desired behaviour and associates the various file extensions with Doc View. The bug is slotted to be resolved in version 9.7.

#+begin_src elisp
  ;; Reading LibreOffice files
  ;; Fixing a bug in Org Mode pre 9.7
  ;; Org mode clobbers associations with office documents
  (use-package ox-odt
    :ensure nil
    :config
    (add-to-list 'auto-mode-alist
                 '("\\.\\(?:OD[CFIGPST]\\|od[cfigpst]\\)\\'"
                   . doc-view-mode-maybe)))
#+end_src

** Bibliographies
These lines of code add two field types to BibTeX entries: keywords to help you order your literature and a link to a file so you can read any attachments in Emacs. The ~ews-register-bibtex~ files assigns the =.bib= files in the ~ews-bibliography-directory~ variable to the list of global BibTeX files. You need to set this variable to the location where you store your bibliography and restart Emacs if needed.

BibTeX mode has many more options that you can configure to modify all sorts of behaviour. This mode is unfortunately not very well documented. 

#+begin_src elisp
  ;; Managing Bibliographies
  (use-package bibtex
    :custom
    (bibtex-user-optional-fields
     '(("keywords" "Keywords to describe the entry" "")
       ("file" "Link to a document file." "" )))
    (bibtex-align-at-equal-sign t)
    :config
    (ews-bibtex-register)
    :bind
    (("C-c w b r" . ews-biblio-register-files)))
#+end_src

BibTeX is old but stable software that was last updated in 1988 and has minor limitations. The BibLaTeX dialect is a more recent version that provides more functionality and flexibility. To change BibTeX Mode to BibLaTeX, change the =bibtex-dialect= variable in the configuration to BibLaTeX by adding the following line to your configuration:

#+begin_src elisp :eval no :tangle no
  (bibtex-set-dialect 'biblatex)
#+end_src

The Biblio package provides a useful interface to online literature repositories. The ~ews-biblio-lookup~ function makes this package a little easier to use.

#+begin_src elisp
  ;; Biblio package for adding BibTeX records
  (use-package biblio
    :bind
    (("C-c w b b" . ews-biblio-lookup)))
#+end_src



#+begin_src elisp
  ;; Citar to access bibliographies
  (use-package citar
    :custom
    (org-cite-global-bibliography ews-bibtex-files)
    (citar-bibliography ews-bibtex-files)
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    :bind
    (("C-c w b o" . citar-open)))
#+end_src

** Reading Websites
Vanilla Emacs opens hyperlinks to the World Wide Web with your operating system's default browser. If you prefer to use EWW as the default, add this code to your configuration file: ~(setq browse-url-browser-function 'eww-browse-url)~. You can configure the EWW search engine by configuring the ~eww-search-prefix~ variable.

#+begin_src elisp
  ;; Use EWW
  ;; (setq browse-url-browser-function 'eww-browse-url)

  ;; Configure Elfeed
  (use-package elfeed
    :custom
    (elfeed-db-directory
     (expand-file-name "elfeed" user-emacs-directory))
    (elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-c w e" . elfeed))

  ;; Configure Elfeed with org mode
  (use-package elfeed-org
    :config
    (elfeed-org)
    :custom
    (rmh-elfeed-org-files
     (list (concat (file-name-as-directory
                (getenv "HOME"))
                   "Documents/elfeed.org"))))
  
  ;; Easy insertion of weblinks
  (use-package org-web-tools
    :bind
    (("C-c w w" . org-web-tools-insert-link-for-url)))
#+end_src

** Playing Multimedia Files
#+begin_src elisp
  ;; Emacs Multimedia System
  (use-package emms
    :init
    (require 'emms-setup)
    (require 'emms-mpris)
    (emms-all)
    (emms-default-players)
    (emms-mpris-enable)
    :custom
    (emms-browser-covers #'emms-browser-cache-thumbnail-async)
    :bind
    (("C-c w m b" . emms-browser)
     ("C-c w m e" . emms)
     ("C-c w m p" . emms-play-playlist )
     ("<XF86AudioPrev>" . emms-previous)
     ("<XF86AudioNext>" . emms-next)
     ("<XF86AudioPlay>" . emms-pause)))
#+end_src

* Ideation
** Org Capture
You could, for example, create a separate entry for a shopping list. You can access the configuration in the capture menu with the =C= button, which pops up the customisation screen for the ~org-capture-templates~ variable. Next click the =INS= button to add another entry and complete the relevant fields as below and save the new variable. The example below create a shopping list stored in a file in your Dropbox folder. Several mobile apps exist that can read Org mode files, so you can take your list to the shops if you have a means to synchronise the relevant files.



The possibilities for capture templates are extensive and depend on your individual use cases. Explaining the configuration of the Org capture options in detail is outside the scope of this website. The Org manual (=C-h R org ENTER g capture ENTER=) discusses developing capture templates in detail.

#+begin_src elisp
  ;; Fleeting notes
  (use-package org
    :bind
    (("C-c c" . org-capture)
     ("C-c l" . org-store-link))
    :custom
    (org-default-notes-file
     (concat (file-name-as-directory ews-home-directory)
           "Documents/inbox.org"))
    (org-capture-bookmark nil)
    ;; Capture templates
    (org-capture-templates
     '(("f" "Fleeting note"
        item
        (file+headline org-default-notes-file "Notes")
        "- %?")
       ("t" "New task" entry
        (file+headline org-default-notes-file "Tasks")
        "* TODO %i%?"))))
#+end_src

** Denote
#+begin_src elisp
  (use-package denote
    :custom
    (denote-sort-keywords t)
    :hook
    (dired-mode . denote-dired-mode)
    :custom-face
    (denote-faces-link ((t (:slant italic))))
    :bind
    (("C-c w d b" . denote-find-backlink)
     ("C-c w d d" . denote-date)
     ("C-c w d f" . denote-find-link)
     ("C-c w d i" . denote-link-or-create)
     ("C-c w d I" . denote-org-extras-dblock-insert-links)
     ("C-c w d k" . denote-keywords-add)
     ("C-c w d K" . denote-keywords-remove)
     ("C-c w d n" . denote)
     ("C-c w d r" . denote-rename-file)
     ("C-c w d R" . denote-rename-file-using-front-matter)))
#+end_src

The Consult-Notes package helps to quickly find notes. The default location to find notes is the Denote folder. You can add other locations to the search menu to create a one-stop shop to find any files. If, for example, you keep your photographs in =~/Photos= then add ~("Photographs" ?p "~/Photos")~ so they become part of the search menu. The letter after the question mark becomes the key to limit the search to this silo, prefixed with a colon. So in this example, starting with =:p= will only show files in the photos directory.

For the search functionality to work you need to install the RipGrep program, an extremely fast program to search through text files. 

#+begin_src elisp
  (use-package consult-notes
    :custom
    (consult-narrow-key ":")
    (consult-notes-file-dir-sources
     `(("Denote Notes"  ?d ,ews-notes-directory)))
    :bind
    (("C-c w h" . consult-org-heading)
     ("C-c w f" . consult-notes)
     ("C-c w g" . consult-notes-search-in-all-notes)))
#+end_src


#+begin_src elisp
  (use-package citar-denote
    :demand t
    :custom
    (citar-open-always-create-notes t)
    :config
    (citar-denote-mode)
    :bind
    (("C-c w b c" . citar-create-note)
     ("C-c w b n" . citar-denote-open-note)
     ("C-c w b x" . citar-denote-nocite)
     :map org-mode-map
     ("C-c w b k" . citar-denote-add-citekey)
     ("C-c w b K" . citar-denote-remove-citekey)
     ("C-c w b d" . citar-denote-dwim)))
#+end_src



#+begin_src elisp
  (use-package denote-explore
    :bind
    (;; Statistics
     ("C-c w x c" . denote-explore-count-notes)
     ("C-c w x C" . denote-explore-count-keywords)
     ("C-c w x b" . denote-explore-keywords-barchart)
     ("C-c w x x" . denote-explore-extensions-barchart)
     ;; Random walks
     ("C-c w x r" . denote-explore-random-note)
     ("C-c w x l" . denote-explore-random-link)
     ("C-c w x k" . denote-explore-random-keyword)
     ;; Denote Janitor
     ("C-c w x d" . denote-explore-identify-duplicate-notes)
     ("C-c w x z" . denote-explore-zero-keywords)
     ("C-c w x s" . denote-explore-single-keywords)
     ("C-c w x o" . denote-explore-sort-keywords)
     ("C-c w x r" . denote-explore-rename-keywords)
     ;; Visualise denote
     ("C-c w x n" . denote-explore-network)
     ("C-c w x v" . denote-explore-network-regenerate)
     ("C-c w x D" . denote-explore-degree-barchart)))
#+end_src

* Production
** Managing the Writing Process
#+begin_src elisp
  (use-package org
    :custom
    (sentence-end-double-space nil)
    :bind
    (:map org-mode-map
          ("C-c w n" . ews-org-insert-notes-drawer)
          ("C-c w p" . ews-org-insert-screenshot)
          ("C-c w c" . ews-org-count-words)))
#+end_src

#+begin_src elisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    :custom
    (undo-tree-auto-save-history nil)
    :bind
    (("C-c w u" . undo-tree-visualize)))
#+end_src

#+begin_src elisp
  (use-package olivetti
    :bind
    (:map text-mode-map
          ("C-c w o" . ews-olivetti)))
#+end_src

** Citations
#+begin_src elisp
  ;; Export citations with Org Mode
  (require 'oc-natbib)
  (require 'oc-csl)

  (setq org-cite-csl-styles-dir ews-bibtex-directory
        org-cite-export-processors
        '((latex natbib "apalike2" "authoryear")
          (t     csl    "apa6.csl")))
#+end_src

** Quality Assurance

#+begin_src elisp
  ;; Lookup words in online dictionary
  (use-package dictionary
    :custom
    (dictionary-server "dict.org")
    :bind
    (("C-c w s d" . dictionary-lookup-definition)))
#+end_src

The [[https://github.com/bnbeckwith/writegood-mode][writegood package]] helps to detect buzzwords, passive writing and repeated words. This package also contains functions to estimate the complexity of a text.

#+begin_src elisp
  (use-package writegood-mode
    :bind
    (("C-c w s r" . writegood-reading-ease))
    :hook
    (text-mode . writegood-mode))
#+end_src

** Version Control

The ~ediff~ family of function by default does not split its windows nicely, so these settings make the program easier to use.

#+begin_src elisp
  ;; ediff
  (setq ediff-keep-variants nil
        ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

* Publication
** Basic Settings

The timestamp for exporting files is set to the European date format of day month and year. If you publish for American audiences, perhaps you like to modify the ~org-export-date-timestamp-format~ to ="%B %e %Y"=. The letters each stand for the full name of the month, the day number without leading zero and the year in four digits. See the documentation for the ~format-time-string~ function for details on how to format dates in other methods.

#+begin_src elisp
  ;; Org Export Settings
  (use-package org
    :custom
    (org-export-with-drawers nil)
    (org-export-with-todo-keywords nil)
    (org-export-with-broken-links t)
    (org-export-with-toc nil)
    (org-export-with-smart-quotes t)
    (org-export-date-timestamp-format "%e %B %Y"))
#+end_src

** Office Documents
#+begin_src elisp :tangle no
  ;; Not included in EWS
  ;; Export ODT to MS-Word
  (setq-default org-odt-preferred-output-format "docx")
  ;; Export ODT to PDF
  (setq-default org-odt-preferred-output-format "pdf")
#+end_src

** Latex
#+begin_src elisp
  ;; LaTeX PDF Export settings
  (use-package ox-latex
    :ensure nil
    :demand t
    :custom
    ;; Multiple LaTeX passes for bibliographies
    (org-latex-pdf-process
     '("pdflatex -interaction nonstopmode -output-directory %o %f"
       "bibtex %b"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    ;; Clean temporary files after export
    (org-latex-logfiles-extensions
     (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out"
             "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk"
             "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"
             "tex" "bcf"))))
#+end_src

#+begin_src elisp
  (with-eval-after-load 'ox-latex
    ;; CRC Publishing template
    (add-to-list
     'org-latex-classes
     '("crc"
       "\\documentclass[krantz2]{krantz}
          \\usepackage{lmodern}
          \\usepackage[authoryear]{natbib}
          \\usepackage{nicefrac}
          \\usepackage[bf,singlelinecheck=off]{caption}
          \\captionsetup[table]{labelsep=space}
          \\captionsetup[figure]{labelsep=space}
          \\usepackage{Alegreya}
          \\usepackage[scale=.8]{sourcecodepro}
          \\usepackage[breaklines=true]{minted}
          \\usepackage{rotating}
          \\usepackage[notbib, nottoc,notlot,notlof]{tocbibind}
          \\usepackage{amsfonts, tikz, tikz-layers}
          \\usetikzlibrary{fadings, quotes, shapes, calc, decorations.markings}
          \\usetikzlibrary{patterns, shadows.blur}
          \\usetikzlibrary{shapes,shapes.geometric,positioning}
          \\usetikzlibrary{arrows, arrows.meta, backgrounds}
          \\usepackage{imakeidx} \\makeindex[intoc]
          \\renewcommand{\\textfraction}{0.05}
          \\renewcommand{\\topfraction}{0.8}
          \\renewcommand{\\bottomfraction}{0.8}
          \\renewcommand{\\floatpagefraction}{0.75}
          \\renewcommand{\\eqref}[1]{(Equation \\ref{#1})}
          \\renewcommand{\\LaTeX}{LaTeX}"
       ("\\chapter{%s}" . "\\chapter*{%s}")
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\paragraph*{%s}"))))
#+end_src


** ePub
#+begin_src elisp
  ;; epub export
  (use-package ox-epub
    :demand t)
#+end_src

** Advanced Export Settings for EWS                               :noexport:
#+begin_src elisp
  ;; ADVANCED EXPORT SETTINGS FOR EWS (UNDOCUMENTED)
  
  ;; Use GraphViz for diagrams
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t))) ; this line activates dot
#+end_src

* Administration

** Getting Things Done
#+begin_src elisp
   (use-package org
    :bind
    (("C-c a" . org-agenda)))
#+end_src

** Manage Files
The dired package is a convenient and powerful tool to keep your drives organised and access your information. Developers have published an extensive collection of extensions to dired to add functionality, which you can find in the package manager.

Dired lists files and directories in alphabetical order. I prefer a different view, which shows directories on top and files below them. The parameters determine the order of the entries in the folder.

This last bit of configuration code defines how Emacs deals with automated backups. The default setting is that the system stores these files in the folder where the original files lives, clutterin/g your drive with copies of your stuff. The setting below modifies the =backup-directory-alist= variable so that Emacs saves all backups in your configuration folder. This configuration also eliminates lock files, which are only useful when working in shared folders.

Alternatively, you could instruct Emacs to not save backups at all with ~(setq-default make-backup-files nil)~. I prefer keeping backups as they have saved my bacon a few times in the past.


#+begin_src elisp
  ;; FILE MANAGEMENT
  (use-package dired
    :ensure
    nil
    :commands
    (dired dired-jump)
    :custom
    (dired-listing-switches
     "-goah --group-directories-first --time-style=long-iso")
    (dired-dwim-target t)
    (delete-by-moving-to-trash t)
    :init  ;; Open dired folders in same buffer
    (put 'dired-find-alternate-file 'disabled nil))

  ;; Hide hidden files
  (use-package dired-hide-dotfiles
    :hook
    (dired-mode . dired-hide-dotfiles-mode)
    :bind
    (:map dired-mode-map ("." . dired-hide-dotfiles-mode)))

  ;; Backup files
  (setq backup-directory-alist
        `(("." . ,(expand-file-name "backups/" user-emacs-directory)))
        version-control t
        delete-old-versions t
        create-lockfiles nil)  ; No lock files
#+end_src

The function to save the recent files runs every five minutes, instead of only when Emacs exists. The function to save the list of recent files needs some modifictaion to prevent messages popping up in the buffer every so often.

#+begin_src elisp
  ;; Recent files
  (use-package recentf
    :config
    (recentf-mode t)
    (run-at-time nil (* 5 60)
                 (lambda () (let ((save-silently t))
                              (recentf-save-list))))
    :custom
    (recentf-max-saved-items 50)
    :bind
    (("C-c w r" . recentf-open)))

  ;; Bookmarks
  (use-package bookmark
    :custom
    (bookmark-save-flag 1)
    :bind
    ("C-x r D" . bookmark-delete))
#+end_src

* Modifying Key Sequences
Emacs ships with a range of predefined keyboard shortcuts for its core functionality and the built-in packages. Most external packages don't define key keyboard shortcuts to prevent conflicts with your configuration.

You can change the keyboard's behaviour at three levels: programmable keyboards, the operating system/window manager, and Emacs.

Some high-end keyboards are programmable and let you define the output of each key. For example, you could map the right control key as the Hyper key. At the second level, your operating system interprets the input from the keyboard. In Windows, =s-E= (Windows and E) opens the file explorer. You can erase this binding to make it available in Emacs. Each operating system has its own methods to change keyboard maps (keymaps). Some experienced Emacs users remap the caps lock key to act as the control key to make it easier to use.

Last but not least, you can define key sequences within Emacs itself. The example below binds =F5= to toggling whitespace mode. This minor mode indicates whitespace in the current buffer with characters. The =#'= characters before the function name are a technical requirement to instruct Emacs not to evaluate this function but only to store its value. If you like to unset a keystroke, just use ~nil~ as the function.

#+begin_src elisp :tangle no
  (keymap-global-set "<F5>" #'whitespace-mode)
#+end_src

This example uses the global keymap, meaning the shortcut is available in all modes. You can also define a shortcut for a specific mode, which is only available when that mode is active. The example below sets the same shortcut but only applies when Org mode is active.

#+begin_src elisp :tangle yes
  (keymap-set org-mode-map "C-t" #'whitespace-mode)
#+end_src

Some people don’t like the Emacs keyboard defaults much because they require frequent use of the modifier keys. These people suggest that repetitive use of these keys causes strain injury, the dreaded’ Emacs pinky’. Several packages, such as Evil Mode and God Mode, exist within the Emacs ecosystem that change the default keybindings to a different model. /Emacs Writing Studio/ follows the standard conventions and does not modify default keybindings.

