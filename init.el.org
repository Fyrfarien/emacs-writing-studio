#+TITLE: Emacs configuration
#+AUTHOR: Peter Prevos
#+PROPERTY: header-args :tangle yes :tangle ~/.config/emacs/init.el :results silent

* Introduction
Emacs uses an [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][Init File]] in =.config/emacs= in your home folder to store all configurations. The init file is the starting point to personalise your Emacs experience. This file ensures that your computer behaves the way you want it to, instead of the other way around.

This file produces an =init.el= file in the =.conf/emacs= folder. This is one of the three possible ways to create an init file. I prefer storing everything in the =.config/emacs= folder because it keeps all configurations in one place, which is easier to maintain and backup.

This Org file defines and creates the init file using literate programming to document and define the configuration. To create (tangle) the configuration file, execute =C-c C-v C-t= (=org-babel-tangle=). This function reads all source code in this file and concatenates it into the one init file. This configuration is used the next time you start Emacs.

If you like to try these settings without creating a new file, then type =C-c C-v C-b= to evaluate all code blocks. You can also evaluate each code block individually with =C-c C-c=, or each expression separately with =C-x C-e=. By default, Emacs will ask you to confirm that you want to execute code.

Many people publish their elaborate Emacs init files to share the way they configure their favourite program. Some people even publish specialised packages to pre-configure Emacs for a specific purpose. This init file uses a minimalist approach, staying close to the vanilla Emacs configuration.
* Basic Configuration
This section contains basic Emacs configurations.
** Customisation file
Emacs includes a menu-driven configuration system that [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][writes settings]] to the init file on the fly. This code snippet redefines the name of this file to =custom.el= to ensure that the config system does not interfere with =init.el=. If the configuration system uses the =init.el= file, then tangling this Org file will overwrite any previous configurations. The custom configuration file is loaded first. Any settings in the =init.el= file will thus override the configuration in the customisation file.
#+BEGIN_SRC emacs-lisp
;; Emacs init file
;; Peter Prevos
;; https://github.com/pprevos/EmacsLife
;; This init file is generated with an Org-Mode file. 
;; Any manual changes will be periodically overwritten by the script.
;; ------------------------------------------------------------------

;; Customize settings in a separate file
(setq custom-file "~/.config/emacs/custom.el")
(when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC
** Executing code
Emacs distinguishes between "y" or "yes" when asking for confirmation. Emacs uses the longer version when giving the wrong answer is perceived to have serious consequences. I prefer the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Yes-or-No-Prompts.html][Yes or No prompts]] to be all the short version and take the risk.

Org Babel is the package that runs code within an Org file. By default, it will ask for [[https://orgmode.org/manual/eval.html][confirmation]] each time you execute a line. The second config line in this snippet nullifies this behaviour.
#+begin_src emacs-lisp
;; Yes or No
(defalias 'yes-or-no-p 'y-or-n-p)

;; Trust all code embedded in Org files
(setq org-confirm-babel-evaluate nil)
#+end_src
** Packages
Enable the package repositories:
- [[https://elpa.gnu.org/][GNU ELPA]]: Emacs Lisp Package Archive (default)
- [[https://melpa.org/][MELPA]]: Milkypostman’s Emacs Lisp Package Archive
- [[https://orgmode.org/][Org Mode]]: Always using the latest version of Org Mode.

You can install, remove or refresh [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html#Packages][packages]] with the =list-packages= function.

The =use-package= package provides a tidy method to write init files in Emacs. The =ensure= option will install the package if it is not yet available.
#+BEGIN_SRC emacs-lisp
  ;; Package repositories
  (setq package-archives '(
			   ("org" . "https://orgmode.org/elpa/")
			   ("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)

  ;; use-package to simplify the config file
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC
** Visual elements
These configurations change the way Emacs looks and feels:
- The [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Entering-Emacs.html#Entering-Emacs][startup settings]] inhibit startup messages and screen.
- Load the preferred [[https://pawelbx.github.io/emacs-theme-gallery/][theme]] with some modifications.
- Hide the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Tool-Bars.html][toolbar]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Menu-Bars.html][menu bar]] and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Scroll-Bars.html][scroll bar]] (who needs a mouse anyway?)
- Subtly [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html][highlight]] the current line to find your cursor (modify the theme)
- Silence the Alarm Bell
- Display the current time in the mode line
- Theme and fonts
- Fancy mode line
#+BEGIN_SRC emacs-lisp
  ;; VISUAL ENHANCEMENTS

  ;; Startup settings (no startup screen or messages, start in full-screen and remove all bars)
  (setq
   inhibit-startup-message t
   inhibit-startup-screen t)
  ;; (add-to-list 'default-frame-alist '(fullscreen . fullboth)) 
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Themes and fonts
  (use-package hc-zenburn-theme
    :ensure t
    :config
    (load-theme 'hc-zenburn))

  ;; Mixed-pich font definitions
  (use-package mixed-pitch
    :ensure t
    :hook
    ;; All text modes:
    (text-mode . mixed-pitch-mode))

  (set-face-attribute 'default nil :font "Hack" :height 105)
  (set-face-attribute 'fixed-pitch nil :font "Hack" :height 105)
  (set-face-attribute 'variable-pitch nil :family "Roboto" :weight 'regular :height 110)

  ;;cursor
  (blink-cursor-mode 1)
  (setq cursor-type "box")

  ;; Highlight current line
  (global-hl-line-mode 1)

  ;; Silence the alarm
  (setq ring-bell-function 'ignore)

  ;; Display time in modeline
  (setq format-time-format "%H:%M")
  (display-time-mode 1)

  ;; Display bettery life
  (display-battery-mode 1)

  ;; Fancy modeline
  (use-package doom-modeline
    :ensure t
    :config
    (doom-modeline-mode 1))
  ;; run M-x all-the-icons-install-fonts
#+END_SRC
** Cursor Movement
By default the Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Scrolling.html][scroll]] commands don't let you go all the way to the first and last line. The first line changes this behaviour.

The buffer navigation section binds modifed arrow keys to the moving backward and forwards in windows.

Lastly, the mouse is diabled - Emacs is after all a text editor.

#+BEGIN_SRC emacs-lisp
;; Scroll to the first and last line of the buffer
(setq scroll-error-top-bottom t)

;; Buffer navigation
(defun other-window-back ()
    "Select previous window."
    (interactive)
    (other-window -1))
(global-set-key (kbd "s-<end>") 'other-window)
(global-set-key  (kbd "s-<home>") 'other-window-back)

;; Beacon
(use-package beacon
  :ensure t
  :config
    (beacon-mode 1)
    (setq beacon-color "#ECBC9C")
    (setq beacon-blink-when-point-moves t))

;; Disable the mouse
(use-package disable-mouse
  :ensure t
  :config
  (global-disable-mouse-mode))

;; Close Emacs client
(global-set-key (kbd "C-x x") 'delete-frame) 
#+END_SRC
** Org Mode
These are the basic settings for org-mode and its standard keyboard shortcuts.
#+begin_src emacs-lisp
    ;; ORG MODE
    (use-package org
      :ensure org-plus-contrib
      :config
      (global-set-key (kbd "C-c l") 'org-store-link)
      (global-set-key (kbd "C-c a") 'org-agenda)
      (global-set-key (kbd "C-c c") 'org-capture)
      ;; Org mode ricing
      (setq org-startup-indented t
            org-ellipsis "↵" ;folding symbol
            org-hide-emphasis-markers t
            org-agenda-block-seperator ""
            org-image-actual-width 400
            org-tags-column -60))
    ;; Nice bullets
    (use-package org-superstar
      :ensure t
      :config
      (setq org-superstar-special-todo-items t)
      (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
    ;; Open links
    (setq org-file-apps '((auto-mode . emacs)
                         (directory . emacs)
                         ("\\.mm\\'" . default)
                         ("\\.x?html?\\'" . default)
                         ("\\.pdf\\'" . emacs)
                         ("\\.mp4\\'" . "vlc \"%s\"")))
#+end_src
** File Management
*** Backups and saving
#+begin_src emacs-lisp
;; Location for backup files
(setq backup-directory-alist '(("." . "~/.config/emacs/backups")))

;; Auto revert file when changed outside of Emacs
(global-auto-revert-mode 1)
 #+end_src	
*** Dired
Managing files with Emacs.
#+begin_src emacs-lisp
      ;; Dired
      ;; Prevent creating multible buffers (use a to open new folder)
      (put 'dired-find-alternate-file 'disabled nil)

       ;; Copy between instances
        (setq dired-dwim-target t)

        ;; Move files to Trash
        (setq delete-by-moving-to-trash t)

        ;; Dired icons
        (use-package all-the-icons-dired
          :ensure t
          :config
          (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

        ;; Copy full path
        ;; https://emacs.stackexchange.com/questions/36850/copy-to-kill-ring-selected-file-names-full-path
        (defun dired-copy-path-at-point ()
          (interactive)
          (dired-copy-filename-as-kill 0))
        (define-key dired-mode-map (kbd "M-w") 'dired-copy-path-at-point)

    (setq dired-listing-switches "-agho --group-directories-first")

  (use-package dired-hide-dotfiles
    :ensure t
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :bind (:map dired-mode-map ("." . dired-hide-dotfiles-mode)))
#+end_src
** Helm
Helm is an Emacs framework for incremental completions and narrowing selections. It helps to rapidly complete file names, buffer names, or any other Emacs interactions requiring selecting an item from a list of possible choices.

#+begin_src emacs-lisp
(use-package helm
 :ensure t
 :config
   (require 'helm-config)   
 :init (helm-mode 1)
 :bind (("M-x"     . helm-M-x)
        ("C-x C-f" . helm-find-files)
        ("C-x b"   . helm-mini)
        ("C-x r b" . helm-filtered-bookmarks)
        ("C-x C-r" . helm-recentf)
        ("C-c i"   . helm-imenu)
        ("C-h a"   . helm-apropaos)
        ("M-y"     . helm-show-kill-ring)
        :map helm-map
        ("C-z" . helm-select-action)
        ("<tab>" . helm-execute-persistent-action)))
#+end_src
** Keyboard shortcuts
#+begin_src emacs-lisp
;; en-dash (when the text is for export, use --)
(define-key key-translation-map (kbd "C--") (kbd "–"))
#+end_src
** Special Functions
*** Create notes drawer
Adding drawers is a useful way to add contextual information to a text. 
#+begin_src emacs-lisp
  ;; Insert NOTES drawer
  ;; by u/alecigne
  ;; reddit.com/r/orgmode/comments/7awar9/how_to_create_a_keyboard_shortcut_to_crease_an/
  (defun org-insert-drawer-notes ()
      (interactive)
      (org-insert-drawer nil "NOTES"))
      (with-eval-after-load 'org
          (define-key org-mode-map (kbd "C-c C-x n") 'org-insert-drawer-notes))
#+end_src
* Productivity
** Getting Things Done
[[info:org#Workflow states][Workflow states]] indicate the status of actions. Some actions are logged an others require a comment. Logging for [[https://orgmode.org/manual/Repeated-tasks.html][repeated actions]] is disabled
#+BEGIN_SRC emacs-lisp
  ;; Getting Things Done
  ;; Workflow states
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@/!)" "PROJECT(p)" "|" "DONE(d/!)" "CANCELLED(c@/!)")))

  ;; Don't log state chages of repeated tasks
  ;; Log changes in the logbook drawer
  (setq org-log-repeat nil
        org-log-into-drawer t
        org-log-done nil)
#+END_SRC
** Agenda settings
#+begin_src emacs-lisp
  ;; Org Agenda settings
  (setq org-agenda-files '("~/Documents/gtd/gtd.org"))

  (setq org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-include-diary t
        calendar-week-start-day 1
        org-log-repeat nil 
        )

  (setq org-agenda-custom-commands
        '(("d" "Drakenmolen" tags-todo "chores") 
          ("e" "Emacs" tags-todo "emacs")
          ("n" "Netherlands" tags-todo "NL")
          ("o" "Outsource" tags-todo "outsource|VA")
          ("p" "Priorities" tags-todo "+PRIORITY=\"A\"")
          ("h" "Third Hemisphere"
           ((agenda "" ((org-agenda-span 1)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-files 
                         '("~/Documents/gtd/gtd.org"))
                        (org-agenda-sorting-strategy '(priority-up))
                        )) 
            (todo "NEXT" ((org-agenda-files 
                           '("~/Documents/gtd/gtd.org"))))
            (todo "WAITING" ((org-agenda-files 
                              '("~/Documents/gtd/gtd.org"))))
            (stuck "")
            ))
          ("c" "Coliban Water"
           ((agenda "" ((org-agenda-span 5)
                        (org-agenda-start-on-weekday t)
                        (org-agenda-files 
                         '("~/Documents/coliban-water/coliban-water.org"))
                        (org-agenda-sorting-strategy '(priority-up)))) 
            (todo "NEXT" ((org-agenda-files 
                           '("~/Documents/coliban-water/coliban-water.org"))))
            (todo "WAITING" ((org-agenda-files 
                              '("~/Documents/coliban-water/coliban-water.org"))))
            (stuck "")))
          ))

  (setq org-stuck-projects
        '("/PROJECT" ("NEXT" "WAITING") () ))
#+END_SRC
** Taking Notes
*** Default folders
 #+begin_src emacs-lisp
   (setq default-directory (concat (getenv "HOME") "/Documents/")
         org_notes (concat default-directory "zettelkasten/")
         zot_bib (concat org_notes "data/third-hemisphere.bib")
         org-directory org_notes
         deft-directory org_notes
         org-default-notes-file (concat org_notes "inbox.org"))
 #+end_src
*** Org Capture
Org-Mode helps you quickly capture ideas that are not related to your current workflow with [[https://orgmode.org/manual/Capture.html][Org Capture]]. Add your idea and keep working without switching applications or files. Org Capture is great for journal entries, adding tasks to your inbox, create a shopping list and whatever else you like to collect as random thoughts. [[https://cestlaz.github.io/posts/using-emacs-23-capture-1/#.W24BAhgRUVs][Mike Zamansky]] has written excellent instructions on using Org Capture.

This capture setup
- Add actions to inbox in Getting Things Done file
- Add notes to journal
#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits 'error)
  ;; Org capture
  (setq org-capture-templates '(("t" "Third Hemisphere task" entry
                                 (file+headline "~/Documents/gtd/gtd.org" "Inbox")
                                 "* TODO %i%?")
                                ("n" "Third Hemisphere note" item
                                 (file+headline "~/Documents/gtd/gtd.org" "Inbox")
                                 "- %?")
                                ("c" "Coliban Water note" entry
                                 (file+headline "~/Documents/coliban-water/coliban-water.org" "Inbox")
                                 "- %?")
                                ("j" "Coliban Water task" entry
                                 (file+headline "~/Documents/coliban-water/coliban-water.org" "Inbox")
                                 "* TODO %?")
                                ))
  ;; refiling captured entries
  (setq org-reverse-note-order t)
  (setq org-refile-targets '(("~/Documents/gtd/gtd.org" :maxlevel . 2)))
#+END_SRC
*** Org-Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n j" . org-roam-jump-to-index)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n g" . org-roam-graph)
                 ("C-c n c" . org-roam-capture))
                :map org-mode-map
                ("C-c n i" . org-roam-insert))
    :config
    (set-face-attribute 'org-roam-link nil :slant 'italic)
    (setq org-roam-directory org_notes
          org-roam-db-location (concat org-roam-directory "data/org-roam.db")
          org-roam-completion-system 'helm
          org-roam-index-file "index.org"
          org-roam-buffer-width .2
          org-roam-capture-templates '(("d" "default" plain 
                                        (function org-roam--capture-get-point)
                                        "%?"
                                        :file-name "${slug}"
                                        :head "#+title: ${title}\n#+roam_alias:\n#+roam_tags:\nbacklinks: \n\n"
                                        :unnarrowed t
                                        :immediate-finish t))))

  (use-package company-org-roam
    :ensure t
    :config
    (push 'company-org-roam company-backends))
#+end_src
*** Search Notes
 [[https://github.com/alphapapa/helm-org-rifle][helm-org-rifle]] searches through your open Org files. 
 #+begin_src emacs-lisp
 ;; helm org rifle
 (use-package helm-org-rifle
     :ensure t
     :config
     (setq org-directory org-roam-directory)
     :bind
     ("C-x C-r" . helm-org-rifle) ;; Search through open org files
     ("C-x R" . helm-org-rifle-org-directory)) ;; Search through 
#+end_src

[[https://github.com/alphapapa/org-web-tools/tree/58c37ab50e99775cf4ed3d6884aa9c3f45d855de][org-web-tools]] Commands and functions for retrieving web page content and processing it into and displaying it as Org-mode content.
   - =C-x p l= converts a link in the clipboard to an Org Mode link
   - =C-x p i= copies the content of the page in the clipboard to an Org Mode entry.
#+begin_src emacs-lisp

 ;; org web tools
 (use-package org-web-tools
     :ensure t
 )
 (global-set-key (kbd "C-x p l") 'org-web-tools-insert-link-for-url)
 (global-set-key (kbd "C-x p i") 'org-web-tools-insert-web-page-as-entry)

(use-package helm-rg
:ensure t)

#+end_src


*** Capture weblinks
- [[https://github.com/alphapapa/org-web-tools/tree/58c37ab50e99775cf4ed3d6884aa9c3f45d855de][org-web-tools]] Commands and functions for retrieving web page content and processing it into and displaying it as Org-mode content.
  - =C-x p l= converts a link in the clipboard to an Org Mode link
  - =C-x p i= copies the content of the page in the clipboard to an Org Mode entry.
#+begin_src emacs-lisp
;; helm org rifle
(use-package helm-org-rifle
    :ensure t
    :config
    (setq org-directory org-roam-directory)
    :bind
    ("C-x C-r" . helm-org-rifle) ;; Search through open org files
    ("C-x R" . helm-org-rifle-occur-directories)) ;; Search through 

;; org web tools
(use-package org-web-tools
    :ensure t
)
(global-set-key (kbd "C-x p l") 'org-web-tools-insert-link-for-url)
(global-set-key (kbd "C-x p i") 'org-web-tools-insert-web-page-as-entry)
#+end_src
* Writing
** Basics
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][Visual line mode]] is a bit more eacy to work with than the default line trunction.
- The line spacing is set at 2 points for a more readable screen. Emacs does not [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Using-Region.html][delete text]] when an area is selected. 
- The =delete-selection-mode= changes that behaviour.
#+begin_src emacs-lisp
;; Editing configuration
;; Visual line mode (screen alignment)
(global-visual-line-mode)
;; Line spacing
(setq-default line-spacing 2)
;; overwrite selected text
(delete-selection-mode t)
#+end_src
** Editing
*** Undo and redo
#+begin_src emacs-lisp
  ;; Undo Tree Mode
  ;; Allow tree-semantics for undo operations.
  (use-package undo-tree
    :ensure t
    :config
    ;; Always have it on
    (global-undo-tree-mode 1)
    ;; Each node in the undo tree should have a timestamp.
    (setq undo-tree-visualizer-timestamps t)
    ;; Show a diff window displaying changes between undo nodes.
    (setq undo-tree-visualizer-diff t))
  ;; make ctrl-Z redo
  (defalias 'redo 'undo-tree-redo)
  (global-set-key (kbd "C-S-/") 'redo)
  (global-set-key (kbd "C-x C-/") 'undo-tree-visualize)
#+end_src
*** Completion
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t))
#+end_src
*** Spelling and Thesaurus
- [[https://www.emacswiki.org/emacs/FlySpell][FlySpell]] for spell-checking on the fly for my favourite major modes. The F7 key is mappedd to suggesting alternatives for misspelled words.
- The [[https://github.com/agzam/mw-thesaurus.el][thesaurus]] uses a free API to the Merriam-Webster Thesaurus. Press F8 to load the synonyms of the word at point. Press =q= to exit the thesaurus buffer.
#+begin_src emacs-lisp
  ;; Spell checking for Org, Markdown and Fountain modes
  (use-package flyspell
    :ensure t
    :diminish
    :config
   (add-hook 'org-mode-hook 'flyspell-mode)
   (add-hook 'markdown-mode-hook 'flyspell-mode)
   (add-hook 'fountain-mode-hook 'flyspell-mode)
   (global-set-key (kbd "<f7>") 'ispell-word)
   (setq ispell-silently-savep t
         flyspell-case-fold-duplications nil))

  ;; Merriam-Webster Thesaurus
  (use-package mw-thesaurus
  :ensure t
  :config
  (global-set-key (kbd "<f8>") 'mw-thesaurus-lookup-at-point))
#+end_src
*** Typography
#+begin_src emacs-lisp
#+end_src
** Distraction-Free Writing
[[https://github.com/rnkn/olivetti][Olivetti mode]] is a minor mode that enables writing without distractions. This mode recreaates the old typewriter-feel by centering the text in the buffer at a specified with, which I set to 100 characters.
#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :config
    (defun distraction-free ()
      "Distraction-free writing environment"
      (interactive)
      (if (equal olivetti-mode nil) (progn 
                                      (delete-other-windows)
                                      (olivetti-mode t)
                                      (setq olivetti-body-width 100))
        (olivetti-mode 0)))
    (global-set-key (kbd "<f9>") 'distraction-free))
#+end_src
** Writing modes
I write almost all text in Org Mode. I also use two specialised major modes. [[https://fountain-mode.org/][Fountain Mode]] is a scriptwriting program for GNU Emacs using the Fountain plain text markup format. [[https://jblevins.org/projects/markdown-mode/][Markdown-mode]] is a major mode for editing Markdown-formatted text (mainly used for [[https://leanpub.com/][LeanPub]] books and courses). 

#+begin_src emacs-lisp
 ;;Enable Fountain mode
(use-package fountain-mode
    :ensure t
)

 ;; Markdown mode
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
 (setq markdown-command "/usr/bin/pandoc")
#+end_src
** Org Mode
*** Structure templates
 Org Mode uses structural blocks to insert LaTeX, source code and other such types. 
 [[info:org#Structure Templates][Structure Templates]] are a convient way to create such a block. Activate with =C-c C-=.
 #+begin_src emacs-lisp
 ;; Structure templates
 ;;(require 'org-tempo)
 (add-to-list 'org-structure-template-alist '("sl" . "src emacs-lisp"))
 (add-to-list 'org-structure-template-alist '("sr" . "src R"))
 #+end_src
*** Edit LaTeX formulas
#+begin_src emacs-lisp
(use-package org-fragtog
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src
*** Export to LaTeX
 #+begin_src emacs-lisp
 ;; LaTeX
 (require 'ox-latex)
 (setq org-export-with-drawers 'nil
       org-export-with-smart-quotes t
       org-export-with-todo-keywords 'nil
       org-format-latex-options (plist-put org-format-latex-options :scale 2)
       ;;org-latex-listings 'minte
       ;;org-latex-packages-alist '(("" "minted"))
)
;; Edit LaTex in org
;;(require 'org-edit-latex)

 ;; Clean temporary files afer export
 (setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "tex" "bcf")))

 ;; ebooks using memoir
 (add-to-list 'org-latex-classes '("ebook"
 "\\documentclass[11pt, oneside]{memoir}
 \\setstocksize{9in}{6in}
 \\settrimmedsize{\\stockheight}{\\stockwidth}{*}
 \\setlrmarginsandblock{2cm}{2cm}{*} % Left and right margin
 \\setulmarginsandblock{2cm}{2cm}{*} % Upper and lower margin
 \\checkandfixthelayout
 \\usepackage{times}
 \\OnehalfSpacing
 \\usepackage[authoryear]{natbib}
 \\bibliographystyle{apalike}
 \\setlength{\\bibsep}{1pt}
 \\usepackage[raggedright]{sidecap}
 \\setsecheadstyle{\\normalfont \\raggedright \\textbf}
 \\setsubsecheadstyle{\\normalfont \\raggedright \\emph}
 \\usepackage{subcaption} 
 \\usepackage[font={small, it}]{caption}
 \\captionsetup[subfigure]{justification=centering}
 \\usepackage{pdfpages}
 \\usepackage[unicode=true,
     bookmarks=true,bookmarksnumbered=false,bookmarksopen=true,
     bookmarksopenlevel=1, breaklinks=true,pdfborder={0 0 0},backref=false,colorlinks=false,pdfborderstyle={/S/U/W .5}, allbordercolors={.8 .8 .8}]{hyperref}
 \\pagestyle{myheadings}
 \\setcounter{tocdepth}{0}
 \\usepackage{ccicons}
 \\usepackage{nicefrac}
 "
 ("\\chapter{%s}" . "\\chapter*{%s}")
 ("\\section{%s}" . "\\section*{%s}")
 ("\\subsection{%s}" . "\\subsection*{%s}")
 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
 ))

 ;; 6 by 9 paperback
 (add-to-list 'org-latex-classes '("trade"
 "
 \\documentclass[11pt, twoside]{memoir}
 \\setstocksize{9in}{6in}
 \\settrimmedsize{\\stockheight}{\\stockwidth}{*}
 \\setlrmarginsandblock{2cm}{2cm}{*} % Left and right margin
 \\setulmarginsandblock{2cm}{2cm}{*} % Upper and lower margin
 \\checkandfixthelayout
 \\setcounter{tocdepth}{0}
 \\OnehalfSpacing
 \\usepackage{times}
 \\chapterstyle{bianchi}
 \\setsecheadstyle{\\normalfont \\raggedright \\textbf}
 \\setsubsecheadstyle{\\normalfont \\raggedright \\emph}
 \\setsubsubsecheadstyle{\\normalfont\\centering}
 \\usepackage[font={small, it}]{caption}
 \\usepackage{subcaption}
 \\captionsetup[subfigure]{justification=centering}
 \\usepackage{pdfpages}
 \\pagestyle{myheadings}
 \\usepackage{ccicons}
 \\usepackage{nicefrac}
 \\usepackage[authoryear]{natbib}
 \\bibliographystyle{apalike}
 \\usepackage{nohyperref}
 "
  ("\\chapter{%s}" . "\\chapter*{%s}")
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

 ;; Springer
 (add-to-list 'org-latex-classes '("Springer"
		"\\documentclass[natbib]{svjour3}
		\\usepackage{hyperref}"
		("\\section{%s}" . "\\section*{%s}")
		("\\subsection{%s}" . "\\subsection*{%s}")
		("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		("\\paragraph{%s}" . "\\paragraph*{%s}")
		("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

 ;; Magic tricks
 (add-to-list 'org-latex-classes '("magictrick"				  
 "\\documentclass[11pt, a4paper, twocolumn, twoside]{article}
 \\usepackage{ccicons}
 \\usepackage{pdfpages}
 \\usepackage{times}
 \\usepackage{helvet}
 \\usepackage{geometry}
 \\geometry{a4paper, total={170mm,250mm}, left=20mm, top=30mm}
 % header 2008 x 332 px
 \\usepackage{titlesec}
 \\titleformat{\\section}
   {\\bfseries}{\\thesection}{1em}{}
 \\titleformat{\\subsection}
   {\\itshape}{\\thesection}{1em}{}
 \\usepackage{fancyhdr}
 \\usepackage[font={small, it}, labelformat=empty]{caption}
 \\usepackage[hidelinks]{hyperref}
 \\pagestyle{fancy}
 \\renewcommand{\\headrulewidth}{0pt}
 \\renewcommand{\\footrulewidth}{0pt}
 \\setlength{\\parskip}{1em}
 \\renewcommand{\\baselinestretch}{1.1}
 \\setlength\\headheight{100.0pt}
 \\addtolength{\\textheight}{-100.0pt}
 \\fancyhead[LO]{\\Large{\\textsf{Magic Perspectives Presents}} \\includegraphics[width=\\textwidth]{header}}
 \\fancyhead[LE]{\\includegraphics[width=0.5\\textwidth]{header}}
 \\lfoot{Peter Prevos}
 \\rfoot{\\href{https://magicperspectives.net}{magicperspectives.net}}
 "
 ("\\section{%s}" . "\\section*{%s}")
 ("\\subsection{%s}" . "\\subsection*{%s}")
 ))

 ;; Taylor & Francis (Interacta)
 (add-to-list 'org-latex-classes '("TaylorFrancis"
		"\\documentclass[largeformat]{interact}
		\\usepackage{hyperref}"
		("\\section{%s}" . "\\section*{%s}")
		("\\subsection{%s}" . "\\subsection*{%s}")
		("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		("\\paragraph{%s}" . "\\paragraph*{%s}")
		("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

 ;; American Psychological Association papers
 (add-to-list 'org-latex-classes '("apa6"
 "\\documentclass[a4paper, jou, 11pt]{apa6}
 \\usepackage[nodoi]{apacite}
 \\usepackage[british]{babel}
 \\usepackage{inputenc}
 \\usepackage{amsmath}
 \\usepackage{graphicx}
 \\usepackage{csquotes}
 \\usepackage[hyphens]{url}
 \\usepackage[T1]{fontenc}
 \\usepackage{lmodern}
 \\usepackage{hyperref}"
 ("\\section{%s}" . "\\section*{%s}")
 ("\\subsection{%s}" . "\\subsection*{%s}")
 ))
 #+end_src
*** Export to MS Word
Setting the =org-odt-preferred-output-format= variable lets you export an org file directly to Word. This only works when you have LibreOffice installed.
#+begin_src emacs-lisp
(setq org-odt-preferred-output-format "doc")
#+end_src
** Referencing
*** Helm BibTeX
#+begin_src emacs-lisp
  (use-package helm-bibtex
    :ensure t
    :config
    (setq
     bibtex-completion-notes-path org_notes
     bibtex-completion-bibliography zot_bib
     bibtex-completion-pdf-field "file"
     bibtex-completion-notes-template-multiple-files
     (concat
      "#+title: ${title}\n"
      "#+roam_alias: \n"
      "#+roam_key: cite:${=key=}\n"
      "#+roam_tags: \n"
      "* Notes\n"
      ":properties:\n"
      ":Custom_id: ${=key=}\n"
      ":noter_document: %(orb-process-file-field \"${=key=}\")\n"
      ":author: ${author-abbrev}\n"
      ":year: ${year}\n"
      ":DOI: ${doi}\n"
      ":URL: ${url}\n"
      ":END:\n\n"))
    :bind
    ("<XF86Search>" . helm-bibtex))
#+end_src
*** Org Ref
#+begin_src emacs-lisp
  (use-package org-ref
    :ensure t
    :config
    (org-ref-define-citation-link "citeA" ?a)
    (setq
     org-ref-completion-library 'org-ref-helm-cite
     org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
     org-ref-default-bibliography (list zot_bib)
     org-ref-bibliography-notes (concat org_notes "/bibnotes.org")
     org-ref-note-title-format "* %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
     org-ref-notes-directory org_notes
     org-ref-notes-function 'orb-edit-notes))

  (setq org-latex-pdf-process
        '("pdflatex -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src
*** Org Roam BibTeX
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :ensure t
    :after org-roam
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :config
    (define-key org-roam-bibtex-mode-map (kbd "C-c n a") #'orb-note-actions)
    (setq orb-preformat-keywords
          '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
    (setq orb-templates
          '(("r" "ref" plain (function org-roam-capture--get-point)
             ""
             :file-name "${slug}"
             :head "#+title: ${title}\n#+roam_alias: \n#+roam_key: ${ref}\n#+roam_tags: ${keywords}\n* ${title}\n  :properties:\n  :custom_id: ${=key=}\n :author: ${author-or-editor}\n :noter_document: %(orb-process-file-field \"${=key=}\")\n  :noter_page: \n  :end:\n\n"
     :unnarrowed t))))
#+end_src
* Communication
** Email
#+begin_src emacs-lisp
    (require 'mu4e)
    (setq mail-user-agent 'mu4e-user-agent)
    (setq mu4e-sent-folder   "/sent")
    (setq mu4e-drafts-folder "/drafts")
    (setq mu4e-trash-folder  "/trash")
  (setq
     message-send-mail-function   'smtpmail-send-it
     smtpmail-default-smtp-server "smtp.example.com"
     smtpmail-smtp-server         "smtp.example.com"
     smtpmail-local-domain        "example.com")
(setq
  mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
  mu4e-update-interval 3000) 
#+end_src
** Write letters
#+begin_src R
(require 'ox-koma-letter)
(setq org-koma-letter-closing "Regards,")
#+end_src
* Data Science
** Org Babel
#+BEGIN_SRC emacs-lisp
;; Org Babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)   
   (R . t)
   (shell . t)
   (latex . t)
))
#+END_SRC
** ESS
[[https://ess.r-project.org/][Emacs Speaks Statistics]] (ESS) supports editing of scripts and interaction with various statistical analysis programs such as R. You also need to install the R software. Run an R terminal with =M-x R= and enter the preferred working directory.
#+begin_src emacs-lisp
;; Emacs Speaks Statistics (ESS)
(use-package ess
    :ensure t
    :config
    (setq ess-use-company t))
#+end_src
** Magit
Magit implements Git in Emacs and is almost like magic. This line of code creates the  =C-x g= shortcut to open the Magit status screen.
#+BEGIN_SRC emacs-lisp
;; Magit
(use-package magit
    :ensure t
    :config
        (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC
** Code Editing
The [[https://github.com/Fuco1/smartparens][Smartparens]] package simplifies working with parenthesis.
#+begin_src emacs-lisp
      ;; Configure Smartparens
      (use-package smartparens
        :ensure t
        :config (progn (show-smartparens-global-mode t)))
      ;; Line numbers
      (add-hook 'ess-mode-hook 'display-line-numbers-mode)

      ; Parentheses
      (use-package highlight-parentheses
        :ensure t
        :config
        (progn
          (highlight-parentheses-mode)
          (global-highlight-parentheses-mode)))

    ; i3wm config file
  (use-package i3wm-config-mode
  :ensure t)
#+end_src
** Polymode
#+begin_src emacs-lisp
(defun rmd-mode ()
  "ESS Markdown mode for rmd files"
  (interactive)
  (require 'poly-R)
  (require 'poly-markdown)     
  (poly-markdown+r-mode))
#+end_src

* Fun
** Music Player
#+begin_src emacs-lisp
      (require 'emms-setup)
      (emms-all)
      (emms-default-players)
      (setq emms-source-file-default-directory "~/Music/"
            emms-info-functions '(emms-info-tinytag)
            emms-browser-covers 'emms-browser-cache-thumbnail-async)
#+end_src
