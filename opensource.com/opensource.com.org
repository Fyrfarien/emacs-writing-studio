
#+TITLE:  OpenSource.com Articles
#+AUTHOR: Peter Prevos
#+LaTeX_header: \usepackage{times}
#+OPTIONS: toc:nil

* Using Emacs and Org-Mode to create LaTeX documents
  :PROPERTIES:
  :URL:      https://opensource.com/article/20/4/emacs-org-mode
  :Date:     [2020-04-09 Thu]
  :END:
** Introduction
LaTeX is a powerful system to write scientific and technical documents. Writing documents in LaTeX can be confusing because you need to know many commands and your text is littered with backslashes, curly braces and other syntax distractions. Productive writing requires that you focus on the content of the text, instead of how it looks. This article explains how to use the Org mode extension of the [[https://opensource.com/article/20/3/getting-started-emacs][GNU Emacs]] software to write plain text documents and seamlessly export them to LaTex and PDF.

[[https://orgmode.org/][Org mode]] is a built-in Emacs extension that helps you with keeping notes, maintaining todo lists, managing projects, and authoring documents with a fast and effective plain-text system. Emacs also comes with [[https://www.gnu.org/software/auctex/][AUCTex]], which is an extensible package for writing TeX files in Emacs. AUCTex has a preview module so that you see the result of what you type, but I find this distracting as it moves my attention from the content to the design of the document. Writing text in Org mode is my preferred option because the source remains a plain text file with minimal typesetting elements. The text becomes independent of its result as Org mode can export it to multiple formats, including LaTeX and PDF.

Emacs is known for being difficult to use with a steep learning curve. This article proves the opposite as it guides you writing beautiful documents without any complex configuration. Emacs is only difficult when you want to finetune the default settings. This article follows a minimalist approach to provide you with a proof of concept using the vanilla [[https://www.gnu.org/software/emacs/][GNU Emacs]]. The instructions in this text assume that you have Emacs and a fully-function version of LaTeX on your computer.

** First Steps
Before we get started, I need to explain some conventions. In Emacs lingo, the abbreviation =C-c= means typing control-C. The abbreviation =M-x= means typing alt-X. The M stands for mod key, which no longer exists on modern systems. The =S= prefix indicates the shift key.

Use the =find-file= function to create a new document, or to open an existing document, which you can start with the =C-x C-f= keystroke combination. This function opens a dialogue in the mini buffer at the bottom of the screen. The mini buffer is where Emacs communicates with the user. You can type your desired file name.

Emacs is sensitive to file extensions, so ensure that the name of your document ends in =.org=. In Emacs speak, opening or creating a file is called [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visiting.html][visiting a file]]. Visiting a file means reading its contents into an Emacs buffer so it is available for editing. Emacs generates a new buffer for each file that you visit.

** Writing prose with Org mode
Now you can start typing your text in the same way you would do in any text or editor or word processor. Some conventions: Start the file with =#+TITLE:= to denote the title of the document and =#+AUTHOR= for your name. These options are used when exporting the file. Org mode recognises a range of [[https://orgmode.org/manual/Export-Settings.html][export settings]] available to configure the output. For example, to suppress the table of contents, enter =#+OPTIONS: toc:nil=.

Org mode has its own markdown-like conventions to format your document. [[https://orgmode.org/manual/Headlines.html#Headlines][Headlines]] start with one or more asterices. Org mode can [[https://orgmode.org/manual/Global-and-local-cycling.html#Global-and-local-cycling][collapse headlines]] to render parts of it invisible with the =TAB= or =S-TAB= keys. You can make words =*bold*=, =/italic/=, =_underlined_= or ==verbatim==. The Org manual describes the many options for [[https://orgmode.org/manual/Markup-for-Rich-Contents.html#Markup-for-Rich-Contents][richt text]].

One minor issue with vanilla Emacs is You will quickly notice that it does not wrap lines at the end of the visible screen. Emacs has several line-wrapping functions, of which [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][Visual Line Mode]] is the most useful for writing long-form text. To activate this mode, use =M-x= and enter =visual-line-mode= in the mini buffer at the bottom of the screen. The =M-x= keyboard shortcut enables executing functions for which there is no direct keyboard shortcut.

Adding [[https://orgmode.org/manual/Images.html][images]] is as easy as adding a link to the image file, within double square brackets:

#+BEGIN_EXAMPLE
[[file:path_to_image.png]]
#+END_EXAMPLE

Org has a great system to [[https://orgmode.org/manual/Built_002din-Table-Editor.html#Built_002din-Table-Editor][format tables]] in plain ASCII. Any line with =|= is considered part of a table. The vertical line is also the column separator. A line starting with =|-= is rendered as a horizontal rule and rows before the first horizontal rule are header lines. A table might look like this in the source file:

#+BEGIN_EXAMPLE
| Name  |   id | Age |
|-------+------+-----|
| Peter | 1234 |  50 |
| Sue   | 4321 |  54 |
#+END_EXAMPLE

Both images and tables are preceded with =#+CAPTION:= to add a [[https://orgmode.org/manual/Captions.html#Captions][caption]]. Advanced options are also available to control float placement and size of figures.

Emacs has extensive [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic.html#Basic][editing functionality]] to make you more efficient when typing text. Spell checking, thesaurus, auto-completion and an undo tree are just some of the tools that help you to write efficiently.

** Adding LaTeX snippets to Org
Besides the text itself, your Org mode text can include simple LaTeX commands, such as =\newpage=, within the text. Equations in standard LaTeX syntax are placed between dollar signs =$e^{i\pi} + 1 = 0$= The =org-latex-preview= function (=C-c C-x C-l=) shows a [[https://orgmode.org/manual/Previewing-LaTeX-fragments.html][preview]] of any LaTeX equations within the text buffer. Lastly, you can also add complete LaTeX snippets to insert complex content. The code has to be placed in an export block:

#+BEGIN_EXAMPLE
#+BEGIN_EXPORT latex
\setlength{\unitlength}{1cm}
\thicklines
\begin{picture}(10,6)
\put(2,2.2){\line(1,0){6}}
\put(2,2.2){\circle{2}}
\put(6,2.2){\oval(4,2)[r]}
\end{picture}
#+END_EXPORT
#+END_EXAMPLE

** Exporting to LaTeX
Org mode includes a powerful export module to convert your files to many formats using the powerful pandoc software. You start the export module with the =org-export-dispatch= function, which you can run with the =C-c C-e= keyboard shortcut. The dispatch will split your screen and provide a range of options. 

At the first level, pandoc converts the Org mode to a LaTeX file. You can choose to open the LaTeX file in a new buffer or save it as a file. Org mode can also directly render a PDF file, which you can view within Emacs or only save to disk.

#+CAPTION: Screenshot of Emacs with Org mode source and PDF preview.
[[file:org-mode-latex-screenshot.png]]
** Advanced use
This article has only provided a first taste of writing prose in Org mode and LaTeX. Org mode includes numerous configuration options to finetune your document or to change default settings.

By default, Org mode uses the article style to export documents. You can change this with export settings. These settings can also be used to add commands to the document header:

#+BEGIN_EXAMPLE
#+LATEX_CLASS: report
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{times}
#+END_EXAMPLE


If you write scientific documents, the [[https://github.com/jkitchin/org-ref][org-ref]] package by John Kitchin provides org-mode modules for citations, cross-references, bibliographies in org-mode and useful bibtex tools to go with it.

The Org mode manual [[https://orgmode.org/manual/LaTeX-Export.html#LaTeX-Export][LaTex export]] section provides a detailed discussion of the available functionality.
** Conclusion
Org mode is a perfect editor for writing LaTeX. The main advantage is that you lose the clutter of LaTeX syntax and can focus on the text. This advantage comes no cost because you can still add LaTeX code as much as you need. Additionally, you can access to the powerful editing functions of Emacs. Using Org to write books and articles allows you to focus on the text and combine the power of two of the oldest and most powerful open sources pieces of software.
* Emacs for Analysing Data with R
** Introduction
Some years ago, Harvard Business Review published an article which proclaimed data scientist to be the [[https://hbr.org/2012/10/data-scientist-the-sexiest-job-of-the-21st-century][sexiest job]] of the twenty-first century. Interest in data science has exploded since this article. Many great open source projects, such as Python and the R language for statistical computing, have facilitated the rapid developments in how we analyse data. 

I started my career using pencil and paper and moved to spreadsheets. Now the R language is my weapon of choice when I need to create value from data. Emacs is another one of my favourite tools. This article briefly explains how to use the ESS package to get you started with developing R projects in this venerable editor.

The vast majority of R developers use the [[https://opensource.com/article/18/2/getting-started-RStudio-IDE][RStudio]] IDE to manage their projects. RStudio is a powerful open-source editor with specialised functionality to develop data science projects. RStudio is a great IDE, but its editing functions are limited.

Using Emacs to write data science code means that you have access to the full power of this extensible editor. I prefer using Emacs for my data science projects because I can do many other tasks within the same application, leveraging the multifunctionality of this venerable editor. If you are just getting started with Emacs, then please first read [[https://opensource.com/article/20/3/getting-started-emacs][Seth Kenlon's article]].

** Getting ready
Emacs is an almost infinitely extensible text editor, which unfortunately means that many things don't work the way you want them to out of the box. Before you can write and execute R scripts, you need to install some packages and configure them. The ESS ([[https://ess.r-project.org/][Emacs Speaks Statistics]]) package provides an interface between Emacs and R. Other packages, such as [[https://company-mode.github.io/][Company]] and ** help with completion and balancing parenthesis.

Emacs uses a version of Lisp for configuration. The lines of [[https://en.wikipedia.org/wiki/Emacs_Lisp][Emacs Lisp]] code below install the required extensions and define a minimal configuration to get you started. These lines were tested for GNU Emacs version 26.3.

Copy these lines and save them in a file named =init.el= in your =.emacs.d= folder. This is the folder that Emacs uses to store configuration, including the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][init file]]. If you already have an init file, then you can append these lines to your config. This minimal configuration is enough to get you started. 

#+BEGIN_SRC elisp :results silent
;; Elisp file for R coding with Emacs

;; Add MELPA repository and initialise the package manager
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; Install use-package,in case it does not exist yet
;; The use-package software will install all other packages as required
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; ESS configurationEmacs Speaks Statistics
(use-package ess
  :ensure t
)

;; Auto completion
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 2)
  (global-company-mode t)
)

; Parentheses
(use-package highlight-parentheses
  :ensure t
  :config
  (progn
    (highlight-parentheses-mode)
    (global-highlight-parentheses-mode))
  )
#+END_SRC
** Using the R Console
To start an R console session, press =M-x R= and hit enter (=M= is the Emacs way to denote the =Alt= or =command= keys). ESS will ask you to nominate a working directory, which defaults to the folder of the current buffer. You can use more than one console in the same Emacs session by repeating the R command.

Emacs opens a new buffer for your new R console. You can also use the up and down arrow keys to go to previous lines and re-run them. Use the control and arrow up/down keys to recycle old commands.

The [[https://company-mode.github.io/][company package]] (complete anything) manages the autocompletion in both the console and R scripts. When entering a function, the mini buffer at the bottom of the screen shows the relevant parameters. When the autocompletion dropdown menu appears, you can press F1 to view the help file of the chosen option before you select it. 

The [[https://github.com/tsdh/highlight-parentheses.el][highlight-parentheses]] package does what its name suggests. Several other Emacs packages are available to help you balance parentheses and other structural elements in your code.

** Writing R Scripts
Emacs recognises R mode for any buffer with a =.R= extension (the file extension is case-sensitive). Open or create a new file with the =C-x C-f= shortcut and type the path and file name. You can start writing your code and use all of the powerful editing techniques that Emacs provides.

Several functions are available to evaluate the code. You can evaluate each line separately with =C-<return>=, while =C-c C-c= will evaluate a contiguous region. Keying =C-c C-b= will evaluate the whole buffer.

When you evaluate some code, Emacs will use any running console or ask you to open a new console to run the code.

The output of any plotting functions appears in a window outside of Emacs. If you prefer to view the output within Emacs, then you need to save the output to disk and open the resulting file in a separate buffer.

#+CAPTION: Screenshot of literate programming in Org mode, the ESS buffer and graphics output.
[[file:ess-screenshot.png]]
** Advanced Use
This article only provides a brief introduction to using R in Emacs. Many parameters can be fine-tuned to make Emacs behave to your preferences, which would take too much space to cover. The ESS manual describes these in detail. You can also extend functionality with additional packages. 

Org mode can integrate R code, providing a productive platform for literate programming. If you prefer to use RMarkdown, then [[https://github.com/polymode/polymode][polymode]] package has you covered.

Emacs has various packages to make your editing experience more efficient. The best part of using Emacs to write R code is that the program is more than just an IDE, it is a malleable computer system that you can configure to match your favourite work flow.
** Conclusion
This article shows the versatility of Emacs and its use as an R IDE. Learning how to configure Emacs can be daunting. The best way to learn quickly is to copy ideas from people who share their configurations. Miles McBain manages a [[https://github.com/MilesMcBain/esscss][list of Emacs configurations]] that could be useful if you like to explore using the R language in Emacs further.
