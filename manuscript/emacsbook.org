#+TITLE: Become More Productive with Emacs --- The Ultimate Killer App
#+PROPERTY: header-args: :results silent

* Preface
I started computing at the age of 13. I bought a second-hand tiny one kilobyte Sinclair ZX 81 from a friend, which opened a whole new world for me. It did not come with any software and I did not have the money buy any. After booting the ZX 81, the screen simply told you how many bytes are available for you to fill with code. This machine propelled me on an amazing journey of learning how to program in the BASIC language. I later upgraded to an Atari 130XE and spent my teenage years writing software and playing games---while other boys in my street had girlfriends.

During this time, my friend's mother complained about the amount of time we spend in front of a screen. It seems that nothing much has changed in more than thirty years. My response was that our time using a computer was not only about passively playing games, it was also about creativity. I showed some of the software we developed and convinced her that computing and creativity go hand-in-hand.

When I started my civil engineering career, I discovered /Lotus 123/ and became a spreadsheet jockey and forgot about writing code. After a while, I was no longer instructing the computer to do what I wanted it to do, but spent my time finding workarounds within packaged software to meet my needs. The collection of software I used to achieve my goals kept growing. Most applications only lasted until the next best thing came along. It took me almost two decades to return to creative computing.

When writing my dissertation, I recognised that spreadsheets were unable to meet my needs. Researching solutions, I rediscovered the power of writing code by using the R language and returned to computing the way it was intended. The essence of computing is to instruct a machine what to do to achieve your objectives, rather than adjusting your workflow to the software. I wrote my dissertation in \LaTeX and analysed and visualised data using R. While my fellow PhD candidates struggled with Microsoft Word, Excel and other statistics packages, I was able to quickly produce a beautifully typeset academic book.

However, I was still using too many applications to achieve what I wanted. The workflow to create my dissertation was effective but I still relied on a daisy-chain of software. I had heard about Emacs some years earlier, but I was never able to recognise its true value. After graduating I finally had time to experiment and decided to surf the Emacs learning curve to see what the fuss was all about. It took me a day to get the basic principles under my belt and a coupleof years to become proficient enough to write this book. I now use Emacs for almost all my computing activities, including writing this book.

When I first opened Emacs, I had the same feeling as when I first booted my ZX81 home computer. Staring at a blank screen, with no idea what to do. Rather than seeing this as a negative, I started reminiscing about the creative days of 8-bit computing and decided to take the plunge and learn Emacs. The most powerful lesson I learnt from mastering Emacs is that anything with a steep learning curve is worthwhile learning.
* Introduction
** What is Emacs?
When you use a computer to do what you need to do, you more than likely need to use a lot of different programs. You write a memo in a word processor, then switch to a spreadhsheet to create graph, which you then copy and past into your memo. Next you open you e-mail client to send the memo to your collageae. Tird of of this hard work you might oepn Sollitaire to have a rest and play a game. When using these pieces of software, you might have to learn differnt skills for each program. You need to use the software the way the developers intended you to use it.

Working with Emacs is a different experience. You write the memo in Emacs, create the graph with Emacs, email the result with Emacs and you play the game, you guessed it, within Emacs. If you use Emcas, you only need to use to learn one piece of software and you can configure it to work the way you prefer to use it, not the way the programmer wants you to use the software.

Emacs is not a word processor, a spreadsheet or an e-mail program. Emacs is one of the few so-called malleable software packages. The problem with modern software is that it is too rigid. Desktop applications have limited options to configure them. The first princple of maleable software is that it is easy to change. Emacs is maleable because you can build applications within the software using the LISP langauge 

With this great power comes great responsibility. 
** The Quest for Productivity
Methods to increase your productivity a dime-a-dozen on the internet. In our time poor world, everybody seems to want to cram more stuff into their day. Judging by the abundant literature, you can become so productive that "getting things done" only takes a "four hour work week". We achieve these almost magical powers by learning from the "habits of highly effective people" who seem to "eat frogs" for breakfast. A whole library of books with advice on how to get more from your time are published each year. In the wake of all this great advice, developers release a plethora of software to help you become more productive. From software behemoths such as Microsoft's OneNote to mobile apps such as Todoist, the market is saturated with solutions.

In spite of this bonanza of books and apps to increase your productivity, everybody is still looking for the one killer method that will solve all your problems. On social media networks, people often discuss their quest for a more productive life. These discussions revolve around either the perfect method or the perfect applications.

The ongoing quest for the perfect application is a big productivity sink because learning new software and moving your information from one to the another system does not make you productive. Just like many other people, I have wasted a lot of time thinking about productivity and trying various methods and apps, rather than just getting hings done. The biggest secret to getting things done is to simply buckle yourself in and do them. Remember, creative geniuses such as Rembrandt, Newton or Frank Zappa never used productivity hacks or software to manage their time.

This is a slightly unfair statement because productivity in the twenty-first century is very much related to creating digital products in the form of software, text, music and film. Using software to manage your creative process is therefore an essential part of the contemporary creative process.

The good news is that your search for the killer app is over as soon as you start using Emacs. This book explains how to use this amazing piece of software in the most simple terms. This book is essentially a journal of my journey into the world of Emacs. When I started to learn how to use this software, I documented what I learnt as I progressed, which eventually became the content of this book. This book is an example of what Emacs can do as it is written, designed and typeset in Emacs, using the Org Mode and \laTeX packages.

The majority of Emacs users are software developers and a lot of literature about this software is written from this perspective. This book is written from a more generic perspective and is suitable for anyone who wants to find a solution to manage their projects and write websites, articles or books.

This book also is different to other Emacs books because it does not focus on functionality but on outcomes. Whenever I read traditional computing books it takes me a while to put what I have learned in practice because these books often just provide lists of functions you can perform with the software. This chapters in this book start with goal and then explain how to achieve this with Emacs. Reading this book teaches you enough to start writing articles and books, manage projects and actions and undertake other creative projects.

This book is not a comprehensive manual of Emacs but an opinionated description of how to achieve a series of tasks. The text in this book is opinionated because it describes only one or two ways of achieving each objective. The flexible nature of Emacs provides many ways to achieve the same thing. This freedom is both a strength and a weakness. This book aims to shorten the learning curve as much as possible so that you can become creative and productive. If after reading this book you like to know more detail, then I highly recommend you read other books such as /Learning GNU Emacs/ by Debra Cameron, /Mastering Emacs/ by Mickey Petersen or the built-in Emacs manual.

Emacs is one of the most versatile pieces of software imaginable. When you work with Emacs you literally have everything you need at your fingertips. Some users jokingly state that their operating system is merely a means to be able to use Emacs. The multi-functional design of Emacs comes at a price. The learning curve is steep and there are limited graphical interfaces. Once you conquer these hurdles, a world of productivity and computing bliss awaits. This book aims to make it as easy as possible for you to enter into the Emacs universe and start using your computer the way it was intended.
** This Book
This book disucsses how to use Emacs for everything except writing code. Although historically Emacs is a code editor and is still mainly used for this, it has evolved into a complete productivity platform. This book aims to be more than merely a manual on how to use Emacs as it also describes some best practice 

The structure of this book is different to typical books about software. The chapters in this book describe how to undertake certain tasks, such as writing prose, analyse numbers, publish ebooks and so on. Most books about software simply explain the functionality from a more abstract perspective. This approach gets you started faster and will hopefully quell the myth that Emacs is hard to learn.

The approach taken in this book is to use the vanilla GNU Emacs version with minimal modification. This approach helps to fully understand how Emacs works
* Getting Started
This chapter explains some of the basics principles of Emcacs to get you ready for being productive. I aim to include the miunimum amount of information to get you started

** Emacs versions 
This book uses the GNU Emacs version 26.3 as a starting point. 

To find our what version you are using, type =M-x emacs-version= and the result wil lshow in the minibuffer. If the version of your Emacs is lower than 26.3, then I suggest you upgrade your system because some of the functionality in this book might be different to how your system works.

** 
Now that you have completed this dry chapter, you can reward yourself with a game of Tetris. Type =M-x tetris= to have some fun and see how Emacs can also become a productivity drain.
* Write Prose
Emacs is an editor, but editing presumes that you have a text to edit first. 

This chapter discusses the standard functionality in Emacs that is available to write prose.
* Manage Knowledge
:NOTES:
- [[https://www.onlinedegreeprograms.com/blog/2010/100-amazing-ways-to-hack-your-moleskine-notebook/][100 Amazing Ways to Hack Your Moleskine Notebook : OnlineDegreePrograms.com]]
- [[https://writingcooperative.com/zettelkasten-how-one-german-scholar-was-so-freakishly-productive-997e4e0ca125][Zettelkasten — How One German Scholar Was So Freakishly Productive]]
- [[https://www.heise.de/newsticker/meldung/Missing-Link-Luhmanns-Denkmaschine-endlich-im-Netz-4364512.html?hg=1&hgi=2&hgf=false][Missing Link: Luhmanns Denkmaschine endlich im Netz | heise online]]
- [[https://zettelkasten.de/posts/idea-index-journal-fiction/][Use Idea Indexes for Journals and Fiction • Zettelkasten Method]]
:END:

The information revolution has transformed society from relying on primary production as the main occupation to managing knowledge. Everybody who works in an office is a knowledge worker and their main task is to process information. We process vast amounts of information

Ancient cultures committed everything to memory.

* Get Things Done
* Crunch numbers
* Communicate
* Publish your work
* Surf the Web
* Have Fun
** Games
*** Tetris
*** Sokoban
*** Psychologist
** Music
** Videos
* Becoming an Emacs Ninja
