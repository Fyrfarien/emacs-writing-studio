#+LaTeX_CLASS: ebook
#+TITLE: More Productive With Emacs --- The Ultimate Killer App
#+PROPERTY: header-args :results silent
#+TODO: TODO(t) DRAFT(d) EDITED(e) | FINAL(f)
#+OPTIONS: todo:nil
:NOTES:
- [[https://duckduckgo.com/?q=swiss+army+chainsaw&t=ffcm&ia=web][swiss army chainsaw at DuckDuckGo]]

:END:
* DRAFT Introduction
*** What is Emacs?
I only discovered Emacs a few years ago, after almost thirty years of trying many different approaches: paper notebooks, mobile apps, databases and so on. My late introduction to this system is ironic because Emacs itself is more than thirty years old. The first version was released in 1976 when Richard Stallman wrote the first Emacs ("Editor MACroS"), based on the even older TECO editor.

Emacs is a contradiction in the software world because general wisdom suggests that the older the software, the worse it becomes. Emacs has survived for more than four decades because of its versatility and flexibility.

Emacs is essentially a configurable text editor, kinda like Notepad on steroids. To say that Emacs is a text editor is like saying that a Swiss army knife is just a knife. Emacs is the Swiss Army chainsaw of the software world.

In line with postmodern philosophy, in Emacs everything is a text. Spreadsheets are just collections of text, numbers and formulas, action lists are texts, internet pages mostly consist of text and so on. Even images and videos are essentially a text, in that they are a string of numbers converted to colours. This principle allows Emacs to undertake a broad range of tasks, from writing a book to developing software, analysing data or play a games.

Users can configure almost everything in the system with just a little bit of knowledge of the Emacs LISP language. This knowledge requirement might seem a hurdle but it will actually set you free to enjoy your computer the way it was originally intended. Software should adjust to the user, not the other way around as is the case in most modern packages.

The wonderful advantage of this approach is that you have complete freedom over how us use this software. You can instruct it to do almost anything you like and configure it to your specific needs. The disadvantage is that it requires a wholly different approach to computing compared to contemporary software. Using Emacs throws you back to the original intent of using a computer, real user power, but not without a steep learning curve.
*** Redefining user-friendliness
The first hurdle for new users is that Emacs doesn't look like a slick twenty-first century application but more like an angry fruit salad. The lack of slick Apple-esque design might discourage new users because they are used to point their mouse or finger at colourful icons.

Emacs is almost totally based on keyboard shortcuts. Memorising the many shortcuts needed to make Emcas work for you might seem daunting, but your muscle memory will quickly take over from conscious thought. Using the keyboard is a much faster and more versatile way to instruct your computer what you want it to do. Minimising the amount of time you use your mouse is also reduces the risk or Repetitive Strain Injury..

Contemporary software follows the "What You See is What You Get" (WYSYWIG) principle. Graphical interfaces simulate the physical world by making things look like pieces of paper and folders on a desktop. You point, click and drag documents into folders, documents appear as the would on paper and when you are done they go into the rubbish bin.

Emacs and similar text editors use the "What You See is What You Want" (WYSIWYW) principle. As I am writing this book I don't see what it will look like in printed form as you would using modern word processors. In Emacs I only see text, images and some small bits of code to instruct the computer how to typeset the document. This allows me to focus on writing and producing text instead of worrying about the end product.

The WYSIWYG approach distracts the mind from the text and lures the user into fiddling with style over content. A lot of office time is wasted trying to format or typeset documents, time that could be spend producing content. Following the Emacs way will help you become more productive by worrying about the design of the document until after you complete the text. As I am writing this book, it only takes a few keystrokes to convert the flat text into a fully formatted pdf ebook, ready for distribution.

True user friendliness only exists when the user has full control over the software. Emacs allows you to do exactly that, which is the way computing was intended.
*** The learning curve
The second hurdle is that when you first open Emacs, all you see is a splash screen. To make Emacs work for you, you will need to learn the basics principles of using the editor and learn some of the associated add-on packages.

Because Emacs is old software, some of the default settings and terminology is not the same as contemporary graphical editors. Once you embrace these differences 

One of the main strengths of Emacs is that it is almost infinitely extensible. Emacs is not just a text editor, it also has its own programming language. This language allows users to have develop extensions to Emacs that move its functionality far beyond a text editor.

This books helps you navigate this learning curve by only explaining the basic functionality you need to become productive, rather than providing a comprehensive overview of its functionality. 

Emacs does come with a pseudo-graphical interface to help users. This book does not refer to any of this functionality because using the editor without these embellishments will help you to better understand how it works.
*** The Swiss-Army Chainsaw
Emacs is my note taking application and word processor, I am writing this book in Emacs, I maintain some spreadsheets in Emacs, develop data science code in R, play music, read books, manage files, and so on. Anyone who works professionally or creatively with text and numbers will find something of value in Emacs.

There are several major advantages of using Emacs as a replacement for most of your computing needs:
1. One piece of software to manage most of your computing activities makes you more productive because you only need to master one system. Emacs has been around for decades and its open structure allows it to be around for several more.
2. All your information is stored in simple text files. You will never have any problems with compatibility due to esoteric file formats that render your accessible only by one piece of software.
3. You can modify everything in the software to make it suit your specific workflow.
4. Emacs runs on all the major operating systems: Windows, GNU/Linux and Apple's OS X.
5. Emacs is open source and supported by a large group of people. Help is always easy to get.
*** Limitations of Emacs
After singing the praises of this multi-functional editor you would almost think that Emacs is the omnipotent god of software.

Being a text editor, opportunities to create graphics in Emacs are limited. You can display images and integrate them with text, but Emacs has limited functionality to create or modify graphical files. If you need to manage photograph then perhaps you should consider using GIMP (GNU Image Manipulation Program).
*** Emacs versions
Several versions, or forks, of Emacs Exist. The most 

Spacemacs is a popular version that 
*
This book discusses the plain vanilla GNU Emacs version and shows how to configure it to become your main productivity engine.
* DRAFT Getting Started
:NOTES:
Introduction to using Emacs and how it is different from standard contemporary software.
:END:
Before you can start creating new books, software, poetry or whatever else your creative mind wants to produce, you need to understand some of the basic principles of Emacs. This chapter introduces the basic terminology and skills you need to know to enjoy the remainder of the book.
** Installing Emacs
Emacs is available for the three most common desktop operating systems, Linux, Windows and OS X. Each of these systems uses different methods to install the software. The descriptions below get you started with installing Emacs.
*** Windows
*** Apple OS X
David Caldwell maintains the Emcas for OS X version.
*** GNU/Linux
All major Linux distributions contain a version of Emacs which you can install the same way you install all other software. In Ubuntu, simply use the Software installer and search for Emacs. You can consult the relevant documentation for other distributions.
*** Chromebook
The Google Chromebook computers are under the hood Linux computers. The latest version of the Chrome operating system can run Linux applications. Go to settings and activate Linux to start the installation process.

The Linux version is based on Debian and you can install Emacs by typing =sudo apt-get install emacs25= in the command prompt.
** First steps
Let's start Emacs and delve into your new computing environment with some examples. Open your new Emacs installation and follow along. When you open Emacs for the first time, you are greeted by a splash screen. This splash screen gives access to a tutorial, a guided tour and the manual. You can follow these links at your leisure.

You can remove the splash screen by pressing =q=, which will take you to the scratch buffer. A buffer is a text in the Emacs memory. The scratch buffer is your personal scratch pad, which is enabled by default. This buffer is not automatically saved so only use it for taking temporary notes. The scratch buffer is wiped whenever you close Emacs, no questions asked.

When you enter control-x and then control-f, you can open or create a file. The bottom of the screen is the so-called minibuffer. This buffer will now show the words "Find file: ~/". In Emacs language, opening a file is called finding a file. This sequence of keys, called a key binding, will run the =find-file= function. This function either opens an existing file into a buffer, or it will create a new file and buffer.

A buffer is the location where Emacs displays the text you are working on. An Emacs session can contain many buffers. In my workflow, I almost never close a buffer so all my current and past projects are always available at my fingertips.

Lets assume that you don't like to see the icon ribbon on top of the Emacs frame. To remove this frame, type Alt-X and type =tool-bar-mode= and enter. You don't have to type the whole command as you can enter the TAB key to ask Emacs to complete the phrase. 


This provides a very quick introduction into Emacs to get the feel of the software.
** Configuring Emacs
There is no user who uses Emacs without changing the basic configuration. The biggest problem with Emacs is that the default settings can be a disincentive to use this powerful software. This section explain the basic principles of configuring Emacs


If you want to prevent the splash screen from appearing next time you start, you'll need to modify your 'init file'. This file, named =init.el= is located in the =.emacs.d= folder and it is the central configuration file that turns Emacs into your bespoke personal digital assistant. This file makes the software work they way you want to, instead of you working the way the software designers intended.

Emacs also recognises other files as the init file. Many books and websites use the =.emacs= file in your home folder. Using the =init.el= file in your =.emacs.d= folder is the preferred method because this keeps all your Emacs configuration in one location.

Your init file will steadily grow over time as the ultimate form of computing self-expression. Many Emacs users share their init files to show other users how they make their software work for them. Several authors have published starter kits with prefabricated init files for beginners. While these starter kits sound like a great idea, it is best to create your own configuration step-by-step so you fully understand what is inside it. This book teaches you how to create an init file one step at a time.

To create a new init file, type control X, followed by control F. At the bottom of the screen, the 'mini buffer', you'll now see the words =Find file: ~/=. Now type =.emacs.d/init.el= and hit enter. If this file already exists, then Emacs will open it. If this file does not exist, then Emacs will create an empty buffer.

The init file is written in the Emacs LISP language. You will need some rudimentary skills in this language to optimise the configuration. If you like to never see the splash screen again when you start Emacs, then write the following lines in your newly created file:

#+BEGIN_SRC emacs-lisp
;; Hide splash screen
(setq inhibit-startup-screen t)
#+END_SRC

The first line starts with two colons which means it is a comment to help the reader understand the content of the file. The second line is Elisp code that means the variable =inhibit-startup-screen= is set (=setq=) to true (=t=). This code instructs Emacs to inhibit the startup screen the next time the program loads.

Save the file with control-S and you are done. The next time you start Emacs the splash screen will no longer appear. You have just taken your first step into developing your personal Emacs configuration file.
** Using Emacs
A main hurdle for the casual user is that to use Emacs effectively, you need to memorise many keyboard shortcuts and commands. The vast majority of functions are available through a menu structure that can be accessed with a mouse, but most experienced Emacs users prefer to use the keyboard shortcuts. 

For modern computer users it might seem strange to ditch the mouse, but there are some great advantages to use the keyboard over the point-and-click method. If your hands don't have to move away from the keyboard to grab the mouse and find the appropriate icon, you will be a lot more productive. After a while, the complex keyboard shortcuts will become part of your muscle memory, allowing you to very quickly produce and edit text.

Emacs is the oldest piece of software still under development. The gradual evolution of this system means that it has several vestigial functions. Just like human beings still have traces of gills from our evolutionary ancestors, so does Emacs use terminology that is different to contemporary standard computing vocabulary.

For example, to open a file is called 'visiting a file'. Pasting a text is called yanking and cutting a text is the same as killing it. Perhaps the old Emacs terminology is a bit more poetic than the standard words used these days.

Emacs is so old that it was used in a time when keyboards did not have arrow keys. Also functionality, such as copying, cutting, pasting and undo work different to what the average computer user is used to. As most users are accustomed to using arrow keys to move around and select text, use control Z to undo, control C to copy and so on. While you can instruct Emacs to mimic this behaviour by enabling CUA-mode, it is best to learn to edit text the Emacs way because it provides additional benefits.

Another important key is the meta key. On Apple computers this is the command key and on most other computers the left Alt key. In Emacs documentation this is noted as =M= (meta) and =M-x= means you press the meta key and then the 'x' key. The remainder of the book uses this notation to indicate pressing the alt key. Some examples of keyboard shortcuts:

The =M-x= keys execute a command. When you enter this, Emacs expects input in the mini buffer.  Now for some fun and practice. Type =M-x tetris <return>= and start playing the legendary game of Tetris. yes, Emacs can also play games!

If you are ever stuck, you can press the =ESC= key three times or use =C-g= (control g) to escape from a wrong command.

** Buffers and files
All texts that you create with Emacs are stored in buffers, which you can store as a file. Emacs buffers and files are related but yet they are separate entities. A buffer can become a file and a file can become a buffer.

This cryptic statement basically means that you work in buffers, which are unsaved files.

In Emacs language,

When Emacs open a file it is stored in a buffer.
** Frames and Windows
When you open Emacs without any configuration, it will display a single window within a frame. This terminology is the reverse of other software and is one of the many vestigial words in the Emacs vocabulary.

You can change the number of windows and their configuration in a frame with three basic keyboard shortcuts:
- =C-x 1=: Maximises the current window.
- =C-x 2=: Split the current window horizontally in half
- =C-x 3=: Split the current window vertically in half

When, for example executing these three commands in succession, the frame will have three windows with all the same buffer. Two windows side by side, on top of a wider window on the bottom. To remove the active windows, use the =C-x 0= shortcut. If you add this to the previous sequence, your screen will now be spilt horizontally in half. You can keep splitting windows until they become to small o display information.

To move between windows, use the =C-x o= key binding. This will move the cursor in clockwise fashion around the windows. This can be a bit clumsy if you use a lot of open windows.

This functionality is further discussed in the later chapters to show how you can configure your screen top optimise productivity.
** Line Wrapping
To enable visual line wrapping

=(global-visual-line-mode 1)=

** Package Repositories
The real power from using Emacs comes from the thousands of packages that are available to extend its functionality.
*** ELPA
GNU ELPA is the official GNU Emacs package repository. It's the only one enabled by default, which means that it has the greatest reach. At the same time, submitting a package there is a bit of a hassle and requires an FSF copyright assignment, which means it has a relatively limited selection of packages.[REWRITE]

*** MELPA (Milkypostman’s Emacs Lisp Package Archive)
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** GitHub
** Themes
Personal tastes are beyond disputation, especially concerning colours. When it comes to working on a computer, some people like dark background while other people prefer the more common light background. To change a theme in Emacs

When you type =M-x customize-themes=, Emacs switches to a buffer named *Custom Themes*. From there you can select a theme and hit enter to use it in your current session. If you like your chosen theme, then type =C-x C-s= to save it to your configuration file.

Emacs ships with several pre-installed themes. If you like to test different ones, you can download them from the various package repositories or GitHub.
** Org Mode
Just like many other Open Source packages, such as $/LaTeX$ and R, a massive library of packages is available to help you being productive. Although Apple is credited for inventing the App Store, it was really developed by open source communities.

One of the most often used packages is Org Mode. This Emacs extension helps you to manage your projects and actions and is a great text editor to develop a personal Wiki, write papers and books or websites. Much of the content of this book revolves around Org Mode.
* DRAFT Writing Prose
:NOTES:
How to write text in Emacs, focusing on Org Mode, introducing other modes.
:END:
** Introduction
Microsoft Word has dominated the writing world for several decades now. When I started my career, everybody used Wordperfect on a simple text screen with a blue background. ** limited formatting shown on the screen. When Microsoft released the first version of Word with its What You See is What You Get (WYSIWYG) philosophy, everybody quickly switched over.

Before I started writing in Emacs Org Mode I used a range of word processors and most recently Scrivener. This chapter shows how you can use Emacs and Org Mode to write different types of text with the same, if not better functionality than the more popular alternatives. I use Org Mode to write this book, I also use it to write blog articles, journal articles and research notes.
** Writing text
Being a text editor, writing text is obviously the core activity for Emacs. Not all texts are the same and this chapter

To start a new text simply type =C-x C-f=.

After you give this command, Emacs will ask you to type in a name in the mini buffer. Fow now, use

You now start typing whatever it is you like to type.
** Writing Modes
One of the principles in postmodern thinking is that everything is a text. The core principle of these words is that there are no certainties, only interpretations. Interestingly, a guiding principle of Unix-based operating systems is that everything is a text file.

This deep philosophical principle applies to Emacs because very text file needs is interpreted. Emacs can interpret different text files in different ways by using major and minor modes.

A major mode controls how a buffer behaves. A text file could be a movie script, a to-do list, the next great novel, computer code or whichever way you express your creativity. In commercial software, each of these files could be a different file type that you can only read in the software it was created in. In Emacs, everything is a text file and everything is interpretation. Fountain mode helps you write movie or theatre scripts, Org Mode excels at managing your to-do lists and creative writing and there are various major modes for writing code.

Each major mode has different specialised functions and

You don't have to

Each buffer can only have one major mode operating at a time, but it can have several minor modes. A minor mode provides optional extras, such as flyspell for on-the-fly spell checking and *.

Org Mode is arguably the most versatile major mode in Emacs and a large portion of this book describes how to use this software. Org Mode is so powerful that some people, like myself, started using Emacs just to be able to use Org Mode.
*** Getting Started with Org Mode
This software was originally developed by Carsten Dominik, professor of astronomy at the University of Amsterdam, in 2003. Since then, many others have developed the software and it is currently maintained by Bastien Guerry.



To start an Org file simply create a file with a =.org= extension and start writing, for example =C-x C-F test.org <Enter>=.
**** Outlining
Almost all texts are hierarchical. Books have chapters, sections and paragraphs, articles have headings, poems have verses and so on. Org Mode is essentially an outlining tool. To start a new heading, simply write an asterisk as the first character, followed by a space. To create any deeper levels, simply add more stars.

#+BEGIN_TEXT
** Focusing
Pressing =S-TAB= will collapse the whole document, showing only the level one headings. Pressing =S-TAB= once again will show the headings, and repeating it for a second time reveals the whole document.
** Improving the look
*** Declutter your screen
If you don't like the look of so many stars in your buffer, you can hide them using the indent minor mode. This minor mode replaces all leading stars with spaces when viewing the org file in Emacs.

=* Top level headline             |    * Top level headline=
=** Second level                  |      * Second level=
=*** 3rd level                    |        * 3rd level=
=some text                        |          some text=
=*** 3rd level                    |        * 3rd level=
=more text                        |          more text=
=* Another top level headline     |    * Another top level headline=

*** Using Org mode to write prose
If you like to hide the duplicate asterisks and indent the entries, then add the following lines to your init file:

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t
      org-startup-indented t)
#+END_SRC
*** Using bullets instead of the asterisk
You can also replace the start with a set of icons to your own liking. The =org-bullets= package in MELPA replaces the asterisks with UTF-8 characters, such as squares, diamonds and bullets. The list of characters is cycled when the level is deeper that what you specified.
*** Line spacing and wrapping
Changing the line spacing in a buffer is not straightforward in naked Emacs.

=M-x eval-expression=

=(setq line-spacing 3)=


(add-hook 'org-mode-hook 'turn-on-visual-line-mode)

*** Font
Add =(setq org-hide-emphasis-markers t)= to your .emacs file to hide the markup symbols so that for example =/this text/= will be shown as /this text/ on your screen.

** Navigating your document
*** Focus
It is easy to get lost in a sea of words on yo screen and some simple keystrokes can help you focus your eyes. Keying =C-l= will move the line hat your cursor is on to the centre of the screen. If you quickly repeat these keystrokes then the cursor will move to the top of the screen. If you do this three times in a row, the cursor moves to the bottom of the screen.

Including the meta key by pressing =C-M-l= will heuristically recenter the screen to ensure that the paragraph you are writing is still on the screen, if possible. I use this command quite regularly to find my way back to where I was or when working close to the bottom of the screen.

:NOTES:
scroll-lock-mode
centered-cursor mode
:END:
** Spell check
Without the blessing of automated spell checkers, my writing would be absolutely awful. Perhaps I can use the fact that English is my second language as an excuse, but i am simply a lazy speller.

Emacs does have spell checking facilities but you need to configure

Flyspell

=(add-hook 'org-mode-hook 'turn-on-flyspell)=

As soon as you see something spelled incorrectly, hit =C-;= and Flyspell will replace the unrecognised word with the closest alternative. If this is the wrong word, keep hitting =C-;= until you get the correct one.

** Note taking
*** Capture templates
[[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][Learn how to take notes more efficiently in Org Mode –]]
*** Drawers
Org Mode has a very nifty system called drawers. These are sections of text that can be used for a range of purposes. I mainly use drawers to add notes to a text that I am writing. These are usually notes about the purpose of a section, maximum word count or any other useful information.
** Counting Words
Counting words is a basic activity when writing books or articles. Your teacher, lecturer or publisher might have expectations about the number of words in your work. As a writer I also like to keep track of the number of words in each section of my book to ensure a balance between each of the sections and chapters.

Emacs can count words out of the box. The =count-words= function counts the number of lines, words and characters in a buffer. You can also count words more precisely with the =count-words-region= (=M-===). If you use this command without selecting a region the result will be the number of words before the point up to the start of the paragraph.

In Org Mode you can quickly select the subtree you are working with with =C-c @= and then count the words.

The =org-wc= package provides is a useful add-on to Org Mode. This package  shows the word count per heading line, summed over each of the sub-headings.  This software is developed to be fast, so it doesn't check too carefully what it’s counting.


The word count is displayed at the end of each heading. As soon as you start typing again, the word count disappears.
** Images
** Exporting your work
Org mode has excellent export facilities to covert your files to HTML, PDF (using $\LaTeX$) and OFT files, which can be read in Microsoft Word.
*** Typography

=(setq org-export-with-smart-quotes t)=

*** $\LaTeX$
Documents in html or standard flat text are not suitable to be used as a book. When I write books that need to be printed or ebooks in PDF I use $\LaTeX$, a document typesetting system that produces beautifully formatted publications. Not that it is pronounced Lateks because the last letter is a Greek chi so it should sound like 'Latech'. This technology was developed in the 1980s when computer scientist Donald Knuth wanted to write books on his computer.

Org Mode can export your work in PDF by using the $\LateX$ system. By default, the org file is exported using the book template but you can also write your own

Using Org Mode to write $\LaTeX$$ is much easier than using a native editor because you don't have to include complex mark-up commands and use the

If you want to insert $\LaTeX$
** Other Writing Types
*** Journaling
Org Mode is also good at helping you managing a journal or diary.
*** Blogging
*** Theatre and Film Scripts
If you fancy yourself a script writer ready to develop the next blockbuster or critically acclaimed film, then you need Fountain mode. Scripts for theatre, television and film has a very specific format, based on the old typewriter look. There are many pieces of expensive software on the market to help writers confirm with this format

When you install Fountain mode, any file with the =.fountain= extension will be interpreted as a script. The text can be exported to many formats, such as PDF to share your work with others.
** Distraction-Free Writing
*** Clean interface
Writing takes full concentration to produce creative prose, which applies to fiction, non-fiction and writing code. Code is after all, in the words of the great Donald Knuth, poetry. Distractions are the natural enemy of concentration and while your computer is your most important writing tool, it can also be a source of distractions.

Distraction-free writing means that your computer screen is free of clutter and, just like an old typewriter, only shows the text that you are working on. Emacs is quite distraction-free out of the box but you can fine tune some settings to

[[https://github.com/rnkn/olivetti][Olivetti]] is a simple Emacs minor mode that facilities distraction-free writing. The name Olivetti derives from the famous typewriter brand.

You activate Olivetti mode with the =M-x olivetti-mode= command. This minor mode reduces to width of the text to seventy characters and centres the text in the middle of the window. The width of the text is changeable with the =M-x olivetti-set-with= command or =C-c \=.

You can remove further distractions by hiding the icon toolbar, the menu bar and the scroll bar. The code lines below achieve all of this. You can enter these in your init file if you like Emacs to start in this way. If you type =M-x menu-bar-mode <RET>= Emacs will toggle between switching the menu bar on and off. The tool bar and the scroll bars are disabled with =M-x tool-bar= or =M-x scroll-bar-mode=.

The next step to distraction-free writing is to disable any visual or audible notifications. There is no need to be reminded of every email that arrives in your inbox, so best to disable any notifications your computer or phone throws at you. If you like to have some non-distracting background noise you can try some instrumental music from one of the many ambient noise websites. Chapter ** explains how to play music with Emacs.
*** Managing distractions
When you are writing an important text, it is almost inevitable that you mind wanders off to a different topic and all of a sudden you remember that you need to order theatre tickets.

Don't break your workflow, write it down and move on with your more creative work. Some authors keep a distraction notebook handy to record anything that can be dealt with after your writing session.

Org Mode provides a built-in distraction notebook with capture templates. To enable this functionality, add the following to your init file:

#+BEGIN_SRC emacs-lisp
;; Capture distractions
(global-set-key "\C-c c" 'org-capture)
(setq org-capture-templates
	'(("d" "Distraction" entry (file+headline "~distractions.org" "Notes")
	 "* %?\n%T"))
)
#+END_SRC

The capture functionality has no default keybinding and Org Mode recommends using =C-c c=. The next line defines a minimal setup that simply adds all your distractions to the =distractions.org= file in your home folder plus a timestamp. Org Mode has extensive functionality for capture templates, which is described in more detail in the chapter about taking notes.

When you are in a productive flow-state and your suddenly remember that you soon need to rubbish bins out, simply press =C-c c= and =d= to enter your distraction. When done, use =C-c C-c= to save the entry and continue with your train of thought.

This functionality is further explained in the Getting Things Done chapter.
*** Integrating TODO items
Org Mode is in first instance a system to manage your activities and it has extensive functionality for managing projects.

When writing a piece of text it is not uncommon that you realise that you forgot to research a topic. Don't let this omission break your flow but either add a distractions, as described in the previous paragraph, or turn a heading into a to-do item by pressing =S-right=. You will now see the words TODO next to the heading.

=* TODO Introduction*=

The chapter about Getting Things Done explains how to list all these items into an agenda to manage your writing projects.

** TODO Publishing
:NOTES:
Using Org Mode to publish books, articles and blogs
:END:
*** Create books
*** Reading pdf files
*** Bibliographies
* TODO Using Org Mode as your brain's Third Hemisphere
Org Mode is a very versatile major mode that by itself is worth the effort of switching to Emacs. I use Org Mode for almost all Emacs activities. Most of my org files are pages full of notes about various topics. These files form a personal wiki with links between topics, images, external resources and whatever else I want to dump into an organised chaos.

This chapter explains the basics of using Org Mode as a tool to organise your mind. The Getting Stuff Done chapter explains how Org Mode can also be used to manage projects and actions.
** Minimal setup
Before you can use org Mode effectively you should set some default keyboard shortcuts that are not defined at startup. The Org Mode manual recommends the following configuration for your init file. I strongly recommend using these defaults because they are often referenced in documentation.

#+BEGIN_SRC emacs-lisp
;; Default Org Mode Keyboard shortcuts
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cl" 'org-store-link)
#+END_SRC

The Getting Stuff Done chapter discusses the org-agenda function. The =org-iswitchb= function (=C-c b=) makes switching to another Org Mode buffer easier by hiding any other type of buffer in the choice menu. The org-capture function (=C-c c=) provides powerful options to capture and store information. Lastly, the the org-store-link (=C-c l=) function helps to create new hyperlinks to internal and external sources. The last three functions in this list play an important role in converting Emacs into your private version of Wikipedia.
** Basic Principles
Org Mode uses a hierarchical structure to organise your text. This structure is composed of headings of increasing depth. Each heading starts with one or more asterisks. In Org Mode, a subtree is a heading plus all its subordinate text and subheadings. When you write a book, the first level could be a chapter, the second a section and so on. You should view the system of hierarchical headings as a mind map. Every level can branch out into one or more lower levels. Using these headings, Org Mode is a flexible way to organise your mind.
*** Organise your text
You can change the depth of the heading and associated text by adding or removing asterisks, but much easier is to use =M-left= or =M-right=. Moving a heading is easily done with the =M-up= and =M-down=.

The arrow keys only allow you to move a heading around within the boundaries of its current top level heading. If you like to move a heading to another headline, then you can use the refile command with =C-c C-w=. You will see a menu in the minibuffer where you can select the new heading the subtree will move to. The refile function can also move subtrees to another file, which will require some configuration.

Another method of moving a subtree is to cut and paste the text. Use =C-@= to mark the whole subtree you are currently in. You can now copy or cut and paste the text to another location.

Social media about Org Mode often discusses the various ways you can spread your information across different files. When you are starting with Org Mode, I suggest you just use on file and build it until it becomes too large. Many people worry to much about developing classifications for their knowledge and end up with a lot of empty bits.
*** Focus
Org Mode files can quickly become quite large and you can focus your view with the tab button. When You stand on a heading and press tab, the text under the heading collapses and you see an ellipse (=...=) at the end of the heading. The three dots indicate that the content of the heading is hidden. Pressing the tab button once hides all text under the heading, pressing it again shows only the headings and pressing a third time reveals all text. Using =S-TAB= changes the visibility of text for the whole document.

[special function]
*** Lists                                                           :lists:

** Personal Wiki
A Wiki is a document that multiple people

A personal Wiki is a
** Hyperlinks
One of the main characteristics of a Wiki
Org mode documents can contain a lot of different types of links
*** Internal links
*** External links
*** Internet links
If you need to write notes about something you read, heard or saw on the internet, you can copy and paste the URL of the page as a link. Type =C-c C-l=, paste the link into the mini buffer, hit Enter and type the name of the link and close with Enter.

The =org-cliplink= package makes this process a little simpler. When you press =C-x p i= (the standard key binding),  Emacs retrieves the name of the web page and creates a link with that name. If you like to change the name of the link, then go there and press =C-c C-l= to edit the details.
*** Other links
When you write about a journal article with a DOI number (Document Object Identifier), simply type the =doi:= followed by the number, e.g. doi:10.21139/wej.2017.008. The link is automatically created and will take you straight to the journal article page.

** Searching your knowledge
** Capture ideas

** Moving stuff around
* TODO Getting Things Done
:NOTES:
- [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Orgmode for GTD]]
- Scheduling a task to a date is to commit your recalcitrant future self.
- [[https://karl-voit.at/2020/01/20/start-using-orgmode/][UOMF: How to Start With Emacs Org Mode]]
:END:
** The Productivity Quest
The quest to become more productive has become a popular past time. Millions of people around the world struggle with the demands of life in the twenty-first century and they constantly look for ways to cram more activities into their day. Self-proclaimed productivity gurus have published piles of popular books about methods to get more done in your limited available time.

All these methods boil down to three basic principles: set a goal, define the actions to achieve that goal and undertake these actions. These principles might sound simplistic, but it is the basic truth. The plethora of methods merely discuss different ways on how to manage these three steps effectively and efficiently. A central theme of these methods are means to process the enormous amount of information that people are exposed to every day.

In the slipstream of the productivity gurus, software developers have released many apps to manage the information stream of our daily lives. The internet contains many stories about people who moved from one application to the next, in search of the perfect way to manage their projects and tasks. I was one of those people, until I started using Emacs.

Org Mode is an ideal system to help you getting things done. The Org Mode package not only allows you to write prose and code, it is an excellent tool to manage projects, actions and diaries. As with any other Emacs package, it provides virtually unlimited freedom to implement your favourite method to get stuff done. This chapter shows how to use Org Mode to manage your projects and tasks, loosely based on David Allen's /Getting Things Done/ (GTD) method. David Allen describes iterative five steps to become more productive:

1. /Capture/: Empty your mind
2. /Clarify/: Describe what it all means
3. /Organise/ Place it where it belongs
4. /Reflect/: Reflect on your progress
5. /Engage/: Take action
** Capture: Empty your mind
One of the reasons we are often not as productive as we like is because our minds are filled with issues. When our brain is full of thoughts about what we should be doing, we start to worry about how busy we are instead of doing the thing we need to do. David Allen says that "Our minds are for having ideas, not for holding them".

Before the invention of writing, people used to remember everything. People in these, by definition, prehistoric cultures memorised sacred texts and epic poems such as the Iliad or the Maharabata. Their memory was aided by turning these texts into songs. Australian Aboriginals until recently used complex songs to remember their mythology and knowledge of the world. Remembering songs is much easier than any other text. Think about how many song lyrics you can remember flawlessly but struggle to keep a shopping list in your mind.

David Allen is right when he said that the mind is for having ideas. The age of writing has freed our minds from being a storehouse of factual knowledge to a creative machine. The development of humanity accelerated when writing allowed people to free their mind from facts and use that brainpower for creating new ideas.

The first step to getting things done is to empty your mind. This is not a Buddhism-inspired quest for enlightenment, but a simple technique to help you focus. A brain only has a limited capacity as we can only have one thought at a time. When your brain is full of thoughts about what you should be doing, creative and productive thoughts are suppressed. The other problem with keeping ideas in your head is the risk that they will disappear. I am sure you all recognise the experience of having the most wonderful idea when enjoying your morning shower, but half an hour later you are unable to recall your gem. This section explains how to download your brain into Emacs so that you can convert this information in a powerful project management tool.

Start the process by creating a new Org file (=C-x f=) and give it a recognisable name. Any file name is fine, as long as it ends in =.org=. Start each item with one asterisk and write whatever it is you need to do soon, in the near future or something you would like to do in the future. 

As you write your list, include everything you can think about. From the simplest task to your life's most ambitious goal. Don't worry about structure or order, you will organise this list into a usable form later. The main point is to get this information out of our head and into Org Mode. The first part of your list might look something like this:

=* Pay phone bill=

=* Write a book about Emacs=

=* Book summer holiday=

=* Pay gass bill=

=* Learn Latin=

=* And so on ...=

For the next twenty-five minutes, focus only on this task and write down everything that is in your head. Don't multitask and give this activity your undivided attention. Multitasking is the enemy of productivity because our brains can only focus on one intellectual activity at a time. The fact that magicians can so easily fool people illustrates why multitasking is a fool's errand. Perhaps listen to some instrumental music to keep you focused.

Don't spend any time thinking about these tasks. Don't worry about when you'll need to do it or in what order they need to be done just yet. Ensure that your mind is empty by the time you complete your list. If the list only has about a dozen items, then your list is not complete. For most people, fifty actionable items, projects and fuzzy goals are not unusual. If you are overwhelmed by the list then don't shoot the messenger as it merely reflects your life. If it takes you longer than twenty five minutes to empty your mind, then take a five minute break and start again.
*** Org Capture
Once you have completed 

Imagine you are in a boring meeting and are wading through your emails to make the most of your time. You keep your auditory system trained on what is being said and every now and then something interesting needs to be noted down. With most computer system taking note while you are doing something else would require several steps.

With Emacs you can take notes without loosing your train of thought. You hit =C-c c= and the Org Capture buffer appears. You take the note, store it and continue with responding to your emails without much hassle.

The Org Capture functionality is without doubt one of the most productive functions that comes shipped with Emacs.  org Capture functionality is extensive and this section only explains a very basic use case. In the [[Getting Things Done]] chapter adds some more use cases.

-> Shopping list
** Clarify: Process what it all means
You'll notice that some tasks are simple quick wins, like paying a bill, while others require you to undertake a whole range of smaller tasks, such as writing a book. These larger tasks are projects and will need to be broken down in smaller tasks at a later stage.
*** Structure
*** Keywords
Org mode can assign keywords, such as TODO or DONE to each heading. To assign a keyword, press =S-left= or =S-right= to cycle through the workflow. This functionality causes Org Mode to block selecting text with the shift and arrow keys as defined in the Common user Access. You can also change the keyword with =C-c C-t=.

The list of keywords defaults to TODO and DONE but you can add your own sequence of keywords to your liking. You can set this sequence for the current buffer or for all Org Mode files by default.

You can set your workflow to, for example: TODO, WAITING, DONE, CANCELLED. When writing a book, I set my keywords to TODO, DRAFT, EDITED and FINAL. Any workflow is possible. The keywords are traditionally written in capitals, but that is not a requirement.

To set the keywords for the current buffer, add a line that starts with =#+TODO:= to the top of the buffer, followed by the keywords. Press =C-c C-c= to activate this setting. This is the line I use when I write a book or article: =#+TODO: TODO(t) DRAFT(d) EDITED(e) | FINAL(f)=.

The letters between parenthesis are shortcut keys for the =org-todo= function (=C-c C-t=). When your entry has these shortcuts, you can change the keyword using a popup menu. All entries that still need to be done are marked in red and entries after the vertical bar indicate a completed state, which are indicated in green.

To change the workflow for all Org files without a custom setting, you need to add an entry to your init file or customise the =org-todo-keywords= variable using the menu. This is the line I use in my init file:

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords 
        '((sequence "TODO(t)" "WAITING(w@)" "PARKED(p)" "|"
                    "DONE(d)" "CANCELLED(c@)")))
#+END_SRC

If you use action keywords in an article or book that you are writing, it will look a bit silly if these are added to any export files (chapter x). Add =#+OPTIONS: todo:nil= to the start of your file to prevent Org Mode from exporting the keywords, dates an other technicalities.
*** Tags
Org Mode can enhance headlines with tags. Many productivity systems use tags to provide context to individual tags. In Org Mode, you can press =C-c C-q= to add a tag to the current heading. You are prompted to provide a tag, which is then added to the end of the header between colons. Each heading can have multiple tags. 

To create a library of tags

=#+TAGS: chores(c) www(w) emacs(e) shopping(s)= 

When you use

Tags are inherited by all headlines at a lower level than the one you assigned it to. 

*** Checklists
The list functionality for Org Mode (chapter x) can be extended with checklists. 
To convert a heading to a list item, or vice versa, use =C-c C--= or =C-c C-*=. You can check or uncheck the item by pressing =C-c C-c=. If you are at the end of an existing checkbox and hit =MS-enter=, then the next item will also be a checkbox, just as is the case with heading keywords.

Just like lists, the checklist can be indented. This functionality is useful when you need to undertake a series of minor actions as part of a larger action and don't want to create items that appear in your agenda.

Org Mode can also record you progress. If you add =[1/1]= at the end of a heading or list item, the system will count the number of completed artions. If you add the =[%]= template, Org Mode will calculate the percentage of list items that are completed.
*** Scheduling
The keywords that you 

To schedule a task press =C-c C-s=. A calendar appears from which you can select a date. Select a date using the shift and arrow keys. To move by month, use the lesser than and greater than signs. You can enter a time or a time period and hit enter to activate the scheduled date and time. Add a deadline to a task with =C-c C-d= and select the appropriate date and optional time.

You will now see SCHEDULED or DEADLINE and the relevant time written under the heading of the current subtree. The scheduled date is the date that the action will commence. A deadline is the date an action needs to be completed. 

These dates are the same order as you organised your file, but not necessarily in a chronological order. With Org Mode, your to-do items form a database that can be queried with the agenda view. To add the current file to the agenda, use =C-c ]=, or modify your init file by setting the =org-agenda-files= variable as shown below. You can have as many agenda files as needed.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list "~/work.org"
                             "~/school.org" 
                             "~/home.org"))
#+END_SRC

After you added your Org file to  the agenda list, you can view this week's tasks with =C-c C-a=. This will show a list of option. Select =a= to view the default agenda. More about the agenda in the section on reflecting on progress.

Deadlines and scheduled dates are functionally different. The agenda will show future deadlines fourteen days in advance. You can changes this for individual deadlines by adding a negative time after the date. For example, this syntax will notify you of a pending deadline fie days in advance: =DEADLINE: <2018-12-29 Sat -5d>=.

One of the major mistakes that people who write To-Do lists make is that they assign deadlines to tasks that don't actually have one. Adding a scheduled date or deadline to each task will flood our lives with tasks that will only cause you stress because there is so much to do. The fine art of being productive involves scheduling your tasks sensibly so you focus on what is needed and don't get overwhelmed by all the things you need to do in the future.
*** Recurring tasks
To convert a scheduled task into a recurring task you need to add the frequency to the timestamp. To covert a task to a weekly task, add =+1w= after the day of the week, for example:

=SCHEDULED: <2018-11-25 Sun +1w>=



When you now change this task to completed, Org Mode will log the changes and increment the scheduled date by one week and revert the keyword to the first in the list. 

When a task was scheduled more than one week ago, the new data will still be in the past. This happens when you have a weekly task that you forgot to do. You can either complete the task again, or convert it to a .... Using two plus signs will move the task one week after the completion date.

For tasks that need to be repeated a certain time after you completed the last instance, for example changing batteries, use two plus signs:

=SCHEDULED: <2018-11-25 Sun ++1w>=

Marking this entry as done 

=SCHEDULED: <2018-11-25 Sun .+1w>=

If you need both a repeater and a special warning period in a deadline entry, the repeater should come first and the warning period last: =DEADLINE: <2005-10-01 Sat +1m -3d>=. 

** Organise: Place it where it belongs
*** Refile

*** Archive
** Reflect: Reflect on your progress
*** The Agenda
When you do your writing in Org Mode, as described in chapter *, you can easily add action items to each of the headings.

When you then add the document you are writing to the list agenda files by pressing =C-[=, all actions related to your writing project that have a deadline or scheduled date will appear in your agenda. This method creates a very organic link between your work and your todo list without having to switch applications.

- [[https://www.youtube.com/watch?v=u00pglDfgX4&index=7&list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][OrgMode E02S02: Agenda view (advanced) - YouTube]]




*** Todo list for current buffer?

** Engage: Take action
The one thing Emacs cannot do for you is to undertake the actions on your list. Emacs cannot write code or prose for you. Ecmas can, however, help you doing tasks by keeping track of your time.
*** Keeping track of time
I occasionally lecture marketing at the La Trobe University MBA. To get paid, the university requires me to keep a time sheet. Recording a time sheet often involves guesswork because keeping the exact times when you start and stop an activity can be a time-consuming task in itself. Org Mode makes recording the amount of time you spend on a task very easy.

As soon as you start working on a task, you can start the clock with the =org-clock-in= function (=C-c C-x C-i=). When you start this function, a logbook is added to the heading in which you are working. The =org-clock-cancel= function (=C-c C-x C-q=) removes all trace of a clock in case you started it by accident. If you are so busy working away that you forget which task is currently clocked the use the =org-clock-goto= function (=C-c C-x C-j=) to jump to the task at hand. The clock is stopped when you change the status of the action to DONE or when you initiate the =org-clock-out= function (=C-c C-x C-o=).

The keyboard shortcuts for keeping time are easy to remember. All shortcuts start with =C-c C-x=, followed by control:
- =i=: Clocking in
- =q=: quit the current clock
- =j=: jump to the current clock
- =o=: clock out

#+BEGIN_SRC TEXT
:LOGBOOK:
CLOCK: [2018-09-16 Sun 20:12]--[2018-09-16 Sun 20:26] =>  0:14
:END:
#+END_SRC

Org Mode can summarise all clocked actions in a buffer using a clock table. The =org-clock-report= function (=C-c C-x C-r=) displays the clock table. By default the table only summarises the first two levels. The first line of the clock table defines the properties of the table. The =:maxlevel= variable defines the levels that need to be reported. As you can see in the example below, all time for a subtree is also accounted for in the higher trees.

#+BEGIN_SRC TEXT
#+BEGIN: clocktable :scope file :maxlevel 3
#+CAPTION: Clock summary at [2018-09-16 Sun 20:34]
| Headline                   | Time |      |      |
|----------------------------+------+------+------|
| Total time                 | 0:15 |      |      |
|----------------------------+------+------+------|
| Getting Things Done        | 0:15 |      |      |
| \_  The Agenda             |      | 0:15 |      |
| \_    Keeping times sheets |      |      | 0:15 |
#+END:
#+END_SRC

You can build the clock dynamically as you add actions to your project. The clocktable recognises many variables to fine tune how you report the time clocked in the

This section only describes the basic functions and the [[https://orgmode.org/manual/Clocking-work-time.html][Org Mode manual]] describes all possible commands and variables in detail.
*** The Pomodoro Technique
Being more productive doesn't mean getting more done in the same amount of time. Productivity means getting more of the right things done.

One of the greatest risks to completing actions that contribute to your goals are the many distractions of contemporary life.

One popular and deceivingly simple way to retain your focus is the Pomodoro technique. The principle is

This technique will obviously only be effective if you work in a distraction-free environment.

You can easily use this technique with the Org Pomodoro package by Arthur Leonard Andersen. Install the Org Pommodoro package via =M-x package-install RET org-pomodoro=.

=C-c p=

To use this package, move the cursor to a task you are working on. When you start the org-pomodoro function, the task will be clocked-in. A clock will appear in the status bar at the bottom of he screen. After the countdown reaches zero, Emacs plays a bell and a five-minute break period starts. Every four breaks, a long twenty-minute break is started.
0450 537 730
0477 988 677

*** Mobile Apps
Org Mode does come with a native mobile application, which is frankly quite hard to configure. I use the

** Further Resources
This chapter only provides an introduction into organising your goals, projects and activities with Org Mode. This software has more than four hundred configurable variables every user has a different way to organise their life.
*** My Approach
My own system is that I collect most of my thoughts in a paper notebook, which I review once per week to transfer anything worth keeping to the relevant Org Mode files. A paper notebook still has my preference over doing everything on my laptop - there is no need for batteries, it works in direct sunlight and I can easily combine text and graphics. Writing longhand has a contemplative quality I have not been able to replicate with taking electronic notes.

I maintain two Org Mode files with action items: one for work and one for my private activities. I also maintain an Org File for each of the three areas of interest I maintain, being my profession, my interest in the humanities and magic tricks. These five files form the core of how I manage my activities.

Org Capture helps me to collect any random thoughts or action ideas. These thoughts are placed under the Inbox heading in one of my two GTD files.
**** GTD
- TODO, WAITING, PARKED, DONE, CANCELLED
- Heading level 2 DONE and CANCELLED are archived
- Only next and scheduled tasks in a project have a TODO keyword
- Scheduled dates for planned actions
- Deadlines for imposed dates
- All else heading only
**** Files
- Each written project has a separate file
  - Org files for books and articles
    - Contain separate TODO structures and all relevant notes
  - Fountain files for scripts
  - R files for code

Each of my 
*** Online Resources
For a very thorough introduction to using Org Mode to getting things done you should watch the YouTube videos produce by Rainer König from Bavaria in Germany. His detailed [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][Getting yourself organized with OrgMode]] series of videos cover everything you need to know to get yourself organised.
** Final thoughts
At the end of all the thinking, writing lists in Org Mode and setting goals, the only way to be productive is to actually do the work. Emacs can facilitate the creative and productive process, but it cannot do the work for you. Besides the software in your computer, also he software in your mind needs to be configured:
- Inspiration
- Motivation
- Discipline

Before you can be productive you need to know what it is you like to achieve and have original ideas about what that looks like. Emacs can help you with this part as the structured repository for your ideas. And if you are lacking inspiration and need some temporary reprieve from your hard work then use =M-x tetris= to help you relax. Although going for a walk is perhaps a more wholesome option.

Motivation is the key to being productive. Many people set goals because the believe that they want to be a great writer or that they want to become rich and famous. Without motivation, these goals are useless. A passion without action is merely a hobby. When you set yourself personal goals, but struggle to be motivated then perhaps they were not the correct goals to begin with. Many of our self-imposed goals don't follow our internal desires but derive from external expectations. Be brave enough to cancel a project if you fail to motivate yourself. Ask yourself why you set this goal in the first place and perhaps you'll find out that it was not a good plan in the first place.

Discipline is the last ingredient of a productive life. What many people forget when they try to be more disciplined is that taking a break is as important as doing the work.

The many books about productivity all promise to solve your woes by introducing hacks and tricks to help you do more with your time.

Before we can decide that we are productive, we first need to know what that means. How can we distinguish between a productive and an unproductive action? My personal definition of a productive action is any activity that contributes to an objective. This definition allows

Emacs can help you taking the
* TODO Surfing the Web
Emacs also comes shipped with a simple web browser. 

To start browing use =M-x eww enter= and add a web address or search term.

* TODO Crunching Numbers
** Calc
** Org Mode Spreadsheet
Org mode also has capabilities to manage small spreadsheets through tables that you can merge with your text. To create a table, just start a line with the | symbol and start entering values. A vertical bar separates each column, and a horizontal line is indicated by starting a line with =|-=.

=| Item    | Price |=
=|---------+-------|=
=| Apples  | 12.00 |=
=| Oranges | 22.00 |=
=|---------|-------|=
=| Total   |       |=

This will at first look messy, but as soon as you enter =Tab= or =C-c C-c=, the table will align itself, saving you the frustration of filling the cells with spaces.

| Item    | Price |
|---------+-------|
| Apples  | 12.00 |
| Oranges | 22.00 |
|---------+-------|
| Total   | :=vsum($2..$3) |
#+TBLFM: @4$2=vsum($2..$3)

The main difference between an Org table with formulas and a spreadsheet is that the formulas are listed in a line below the table and are not automatically updated.

Spreadsheets within org are great for simple applications because it can get unwieldy if you have a lot of formulas.

*** Exporting
If you need to exchange the information in an Org table with other software, then you can export the table to a CSV file.

** Data Science in Emacs
As a data scientist, I write a lot of code. Documenting code is always problematic because the text is separated from the code. This section describes how I integrate code with Org Mode files to combine my text with analysis and embed visualisations. I am assuming you know the basics of R. If you use another language to analyse information, such as Python,

*** Reproducibility and literate computing

*** Emacs Speaks Statistics


I have successfully used RStudio for several years for all my data science work. RStudio is a fantastic piece of software that makes working with the R language a breeze. In my journey to maximise using Emacs for all my computing needs

The Emacs Speaks Statistics package in Emacs (=ESS=)

The

**** Installing and initialising ESS

**** k
The underscore key in =ESS= is mapped to

When you need to actually use an underscore, you have to press the key twice.


*** Org Babel

https://orgmode.org/manual/Code-evaluation-security.html

*** Integrating Python

*** Other Languages
* TODO Communicate with the world
** Email
** Social Media
* TODO Managing Information
** Managing files
* TODO Having fun
After all this had work writing prose, building a second brain, getting things done and crunching numbers, it is time to have some fun with Emacs. Not only can this software help you with almost any task you can perform on a computer, Emacs also comes shipped with several games and can act as a multi media player.
** Games
Computer games are a generally a distraction from being productive, but not all distraction is useless. Sometimes the mind needs to be allowed to wander to become more creative. When you are in the middle of a game and have a great idea, just hit =C-c c= to capture the idea to your inbox, store it and keep playing.
*** Tetris
Everybody who has ever used a computer knows about Tetris. Since it was released in 1984, more than 170 million copies of this game have been sold. Russian computer engineer Alexey Pajitnov developed it while he worked for the Academy of Science of the Soviet Union in Moscow. It was one the few capitalist software successes from the former communist country.

The blocks in Tetris are /tetrominoes/, which are geometric shapes composed of four orthogonally-connected squares. Tetris is the action version of the mathematical problem of tiling a space with a random set of tetromimoes. The name Tetris is a portmanteau of the words tetrominoes and tennis.

Glynn Clements developed the Emacs open source clone of Tetris. To start plying press =M-x tetris=. You can manoeuvre the falling blocks with the arrow keys. The space bar drops the block and =p= key pauses the game. When you suddenly remind yourself that this is an unproductive use of your time, then hit the =q= button to get back to work.

Tetris is not just a fun way to waste your time. [[https://doi.org/10.1016/j.addbeh.2015.07.020][Jessica Skorka-Brown]] and her colleagues suggested in 2015 that Tetris can block cravings. [[ https://doi.org/10.1371/journal.pone.0013706][Emily Holmes]] and her colleagues found that playing Tetris can reduce flashbacks to traumatic events.

#+CAPTION: About to smash me personal record in Tetris.
[[file:tetris.png]]
*** Sokoban
*** Psychologist
If macs starts stressing you out than perhaps you like to speak to your own personal therapists. No need to book an expensive expert
** Music
** Videos
* TODO The future of Emacs
